/**
 * LUIS Programmatic APIs v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as querystring from "querystring";
import * as url from "url";

import * as isomorphicFetch from "isomorphic-fetch";
import * as assign from "core-js/library/fn/object/assign";

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "https://westus.api.cognitive.microsoft.com/luis/api/v2.0".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: any;
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
};

export interface ApplicationCreateBaseObject {
    "culture"?: string;
    "usageScenario"?: string;
    "description"?: string;
    "domain"?: string;
    "name"?: string;
}

export interface ApplicationCreateObject {
    "culture"?: string;
    "domain"?: string;
    "description"?: string;
    "initialVersionId"?: string;
    "usageScenario"?: string;
    "name"?: string;
}

export interface ApplicationPublishObject {
    "versionId"?: string;
    "isStaging"?: boolean;
}

export interface ApplicationSettingUpdateObject {
    "public"?: boolean;
}

export interface ApplicationUpdateObject {
    "name"?: string;
    "description"?: string;
}

export interface Channel {
    "settings"?: Array<Setting>;
    "name"?: string;
    "method"?: string;
}

export interface ClosedListModelCreateObject {
    "subLists"?: Array<WordListCreateObject>;
    "name"?: string;
}

export interface ClosedListModelPatchObject {
    "subLists"?: Array<WordListCreateObject>;
}

export interface ClosedListModelUpdateObject {
    "subLists"?: Array<WordListCreateObject>;
    "name"?: string;
}

export interface EntityLabelObject {
    "entityName"?: string;
    "startCharIndex"?: number;
    "endCharIndex"?: number;
}

export interface ExampleLabelObject {
    "text"?: string;
    "entityLabels"?: Array<EntityLabelObject>;
    "intentName"?: string;
}

export interface ExampleLabelObjectArray extends Array<ExampleLabelObject> {
}

export interface ExternalKeyCreateObject {
    "type"?: string;
    "value"?: string;
}

export interface ExternalKeyUpdateObject {
    "type"?: string;
    "value"?: string;
}

export interface HierarchicalModel {
    "name"?: string;
    "children"?: Array<string>;
}

export interface HierarchicalModelCreateObject {
    "children"?: Array<string>;
    "name"?: string;
}

export interface HierarchicalModelUpdateObject {
    "children"?: Array<string>;
    "name"?: string;
}

export interface JSONAction {
    "actionName"?: string;
    "actionParameters"?: Array<JSONActionParam>;
    "intentName"?: string;
    "channel"?: Channel;
}

export interface JSONActionParam {
    "phraseListFeatureName"?: string;
    "parameterName"?: string;
    "entityName"?: string;
    "required"?: boolean;
    "question"?: string;
}

export interface JSONApp {
    "name"?: string;
    "versionId"?: string;
    "desc"?: string;
    "culture"?: string;
    "intents"?: Array<HierarchicalModel>;
    "entities"?: Array<HierarchicalModel>;
    "bingEntities"?: Array<string>;
    "actions"?: Array<JSONAction>;
    "closedLists"?: Array<JSONClosedList>;
    "composites"?: Array<HierarchicalModel>;
    "regexFeatures"?: Array<JSONRegexFeature>;
    "modelFeatures"?: Array<JSONModelFeature>;
    "utterances"?: Array<JSONUtterance>;
}

export interface JSONClosedList {
    "name"?: string;
    "subLists"?: Array<JSONSubClosedList>;
}

export interface JSONEntity {
    "startPos"?: number;
    "endPos"?: number;
    "entity"?: string;
}

export interface JSONModelFeature {
    "activated"?: boolean;
    "name"?: string;
    "words"?: string;
    "mode"?: boolean;
}

export interface JSONRegexFeature {
    "pattern"?: string;
    "activated"?: boolean;
    "name"?: string;
}

export interface JSONSubClosedList {
    "canonicalForm"?: string;
    "list"?: Array<string>;
}

export interface JSONUtterance {
    "text"?: string;
    "intent"?: string;
    "entities"?: Array<JSONEntity>;
}

export interface KeyValue {
}

export interface ModelCreateObject {
    "name"?: string;
}

export interface ModelUpdateObject {
    "name"?: string;
}

export interface PatternCreateObject {
    "pattern"?: string;
    "name"?: string;
}

export interface PatternUpdateObject {
    "pattern"?: string;
    "name"?: string;
    "isActive"?: boolean;
}

export interface PhraselistCreateObject {
    "phrases"?: string;
    "name"?: string;
    "isExchangeable"?: boolean;
}

export interface PhraselistUpdateObject {
    "phrases"?: string;
    "name"?: string;
    "isActive"?: boolean;
    "isExchangeable"?: boolean;
}

export interface PrebuiltExtractorNames extends Array<string> {
}

export interface Setting {
    "name"?: string;
    "value"?: string;
}

export interface TaskUpdateObject {
    "version"?: string;
}

export interface UserSubscriptionCreateObject {
    "subscriptionName"?: string;
    "subscriptionKey"?: string;
}

export interface WordListCreateObject {
    "canonicalForm"?: string;
    "list"?: Array<string>;
}



/**
 * DefaultApi - fetch parameter creator
 */
export const DefaultApiFetchParamCreator = {
    /** 
     * Creates a new application.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param applicationCreateObject A JSON object containing Name, Description (optional), Culture,              Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the application.              Default value for the version ID is 0.1.
     */
    appsAddApplication(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "applicationCreateObject"?: ApplicationCreateObject; }, options?: any): FetchArgs {
        const baseUrl = `/apps/`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["applicationCreateObject"]) {
            fetchOptions.body = JSON.stringify(params["applicationCreateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Deletes an application.
     * @param appId Format - guid. The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsDeleteApplication(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling appsDeleteApplication");
        }
        const baseUrl = `/apps/{appId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets the query logs of the past month for the application.
     * @param appId Format - guid. The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsDownloadApplicationQueryLogs(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling appsDownloadApplicationQueryLogs");
        }
        const baseUrl = `/apps/{appId}/querylogs`
            .replace(`{${"appId"}}`, `${ params["appId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets the supported application cultures.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetApplicationCultures(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/apps/cultures`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets the available application domains.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetApplicationDomains(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/apps/domains`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets the application info.
     * @param appId Format - guid. The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetApplicationInfo(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling appsGetApplicationInfo");
        }
        const baseUrl = `/apps/{appId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get the application settings
     * @param appId Format - guid. The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetApplicationSettings(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling appsGetApplicationSettings");
        }
        const baseUrl = `/apps/{appId}/settings`
            .replace(`{${"appId"}}`, `${ params["appId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets the application available usage scenarios.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetApplicationUsageScenarios(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/apps/usagescenarios`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets the endpoint URLs for the prebuilt Cortana applications.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetPersonalAssistantApplications(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/apps/assistants`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Lists all of the user applications.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetUserApplications(params: {  "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/apps/`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Imports an application to LUIS, the application&#39;s JSON should be included in in the request body.
     * @param appName The imported application name.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param jSONApp A JSON representing the LUIS application structure.
     */
    appsImportApplication(params: {  "appName"?: string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "jSONApp"?: JSONApp; }, options?: any): FetchArgs {
        const baseUrl = `/apps/import`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "appName": params["appName"],
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["jSONApp"]) {
            fetchOptions.body = JSON.stringify(params["jSONApp"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Publishes a specific version of the application.
     * @param appId Format - guid. The application version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param applicationPublishObject The application publish object.
     */
    appsPublishApplication(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "applicationPublishObject"?: ApplicationPublishObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling appsPublishApplication");
        }
        const baseUrl = `/apps/{appId}/publish`
            .replace(`{${"appId"}}`, `${ params["appId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["applicationPublishObject"]) {
            fetchOptions.body = JSON.stringify(params["applicationPublishObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Updates the name or description of the application.
     * @param appId Format - guid. The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param applicationUpdateObject A JSON object containing Name and Description of the application.
     */
    appsRenameApplication(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "applicationUpdateObject"?: ApplicationUpdateObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling appsRenameApplication");
        }
        const baseUrl = `/apps/{appId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["applicationUpdateObject"]) {
            fetchOptions.body = JSON.stringify(params["applicationUpdateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Updates the application settings
     * @param appId Format - guid. The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param applicationSettingUpdateObject An app setting object contains the new app settings
     */
    appsUpdateApplicationSettings(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "applicationSettingUpdateObject"?: ApplicationSettingUpdateObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling appsUpdateApplicationSettings");
        }
        const baseUrl = `/apps/{appId}/settings`
            .replace(`{${"appId"}}`, `${ params["appId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["applicationSettingUpdateObject"]) {
            fetchOptions.body = JSON.stringify(params["applicationSettingUpdateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Adds a labeled example to the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param exampleLabelObject A JSON object containing the example label.
     */
    examplesAddLabel(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "exampleLabelObject"?: ExampleLabelObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling examplesAddLabel");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling examplesAddLabel");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/example`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["exampleLabelObject"]) {
            fetchOptions.body = JSON.stringify(params["exampleLabelObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Adds a batch of labeled examples to the specified application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param exampleLabelObjectArray A JSON array containing example labels.
     */
    examplesBatchAddLabels(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "exampleLabelObjectArray"?: ExampleLabelObjectArray; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling examplesBatchAddLabels");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling examplesBatchAddLabels");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/examples`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["exampleLabelObjectArray"]) {
            fetchOptions.body = JSON.stringify(params["exampleLabelObjectArray"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Deletes the label with the specified ID.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param exampleId The example ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    examplesDeleteExampleLabels(params: {  "appId": string; "versionId": string; "exampleId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling examplesDeleteExampleLabels");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling examplesDeleteExampleLabels");
        }
        // verify required parameter "exampleId" is set
        if (params["exampleId"] == null) {
            throw new Error("Missing required parameter exampleId when calling examplesDeleteExampleLabels");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/examples/{exampleId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"exampleId"}}`, `${ params["exampleId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Returns examples to be reviewed.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    examplesReviewLabeledExamples(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling examplesReviewLabeledExamples");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling examplesReviewLabeledExamples");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/examples`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Creates a new pattern feature.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param patternCreateObject A JSON object containing Name and Pattern of the feature.
     */
    featuresCreatePatternFeature(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "patternCreateObject"?: PatternCreateObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling featuresCreatePatternFeature");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling featuresCreatePatternFeature");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/patterns`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["patternCreateObject"]) {
            fetchOptions.body = JSON.stringify(params["patternCreateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Creates a new phraselist feature.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param phraselistCreateObject A JSON object containing Name, comma-separated Phrases and the isExchangeable boolean.              Default value for isExchangeable is true.
     */
    featuresCreatePhraselistFeature(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "phraselistCreateObject"?: PhraselistCreateObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling featuresCreatePhraselistFeature");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling featuresCreatePhraselistFeature");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/phraselists`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["phraselistCreateObject"]) {
            fetchOptions.body = JSON.stringify(params["phraselistCreateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Deletes a pattern feature from an application version.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param patternId The ID of the pattern feature to be deleted.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresDeletePatternFeature(params: {  "appId": string; "versionId": string; "patternId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling featuresDeletePatternFeature");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling featuresDeletePatternFeature");
        }
        // verify required parameter "patternId" is set
        if (params["patternId"] == null) {
            throw new Error("Missing required parameter patternId when calling featuresDeletePatternFeature");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/patterns/{patternId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"patternId"}}`, `${ params["patternId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Deletes a phraselist feature from an application.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param phraselistId The ID of the feature to be deleted.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresDeletePhraselistFeature(params: {  "appId": string; "versionId": string; "phraselistId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling featuresDeletePhraselistFeature");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling featuresDeletePhraselistFeature");
        }
        // verify required parameter "phraselistId" is set
        if (params["phraselistId"] == null) {
            throw new Error("Missing required parameter phraselistId when calling featuresDeletePhraselistFeature");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/phraselists/{phraselistId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"phraselistId"}}`, `${ params["phraselistId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets all application version features.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresGetApplicationVersionFeatures(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling featuresGetApplicationVersionFeatures");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling featuresGetApplicationVersionFeatures");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/features`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets all application version pattern features.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresGetApplicationVersionPatternFeatures(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling featuresGetApplicationVersionPatternFeatures");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling featuresGetApplicationVersionPatternFeatures");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/patterns`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets all application phraselist features.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresGetApplicationVersionPhraselistFeatures(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling featuresGetApplicationVersionPhraselistFeatures");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling featuresGetApplicationVersionPhraselistFeatures");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/phraselists`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets pattern feature info.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param patternId The pattern feature ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresGetPatternFeatureInfo(params: {  "appId": string; "versionId": string; "patternId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling featuresGetPatternFeatureInfo");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling featuresGetPatternFeatureInfo");
        }
        // verify required parameter "patternId" is set
        if (params["patternId"] == null) {
            throw new Error("Missing required parameter patternId when calling featuresGetPatternFeatureInfo");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/patterns/{patternId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"patternId"}}`, `${ params["patternId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets phraselist feature info.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param phraselistId The phraselist feature ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresGetPhraselistFeatureInfo(params: {  "appId": string; "versionId": string; "phraselistId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling featuresGetPhraselistFeatureInfo");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling featuresGetPhraselistFeatureInfo");
        }
        // verify required parameter "phraselistId" is set
        if (params["phraselistId"] == null) {
            throw new Error("Missing required parameter phraselistId when calling featuresGetPhraselistFeatureInfo");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/phraselists/{phraselistId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"phraselistId"}}`, `${ params["phraselistId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Updates the pattern, the name and the state of the pattern feature.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param patternId The ID of the feature to be updated.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param patternUpdateObject A JSON object containing either:&lt;/br&gt;1- Just a boolean called IsActive, in which case the status of the feature will be changed.&lt;/br&gt;2- Name, Pattern and a boolean called IsActive to update the feature.
     */
    featuresUpdatePatternFeature(params: {  "appId": string; "versionId": string; "patternId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "patternUpdateObject"?: PatternUpdateObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling featuresUpdatePatternFeature");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling featuresUpdatePatternFeature");
        }
        // verify required parameter "patternId" is set
        if (params["patternId"] == null) {
            throw new Error("Missing required parameter patternId when calling featuresUpdatePatternFeature");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/patterns/{patternId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"patternId"}}`, `${ params["patternId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["patternUpdateObject"]) {
            fetchOptions.body = JSON.stringify(params["patternUpdateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Updates the phrases, the state and the name of the phraselist feature.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param phraselistId The ID of the feature to be updated.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param phraselistUpdateObject A JSON object containing either:&lt;/br&gt;1- Just a boolean called IsActive, in which case the status of the feature will be changed.&lt;/br&gt;2- Name, Pattern, Mode, and a boolean called IsActive to update the feature.
     */
    featuresUpdatePhraselistFeature(params: {  "appId": string; "versionId": string; "phraselistId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "phraselistUpdateObject"?: PhraselistUpdateObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling featuresUpdatePhraselistFeature");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling featuresUpdatePhraselistFeature");
        }
        // verify required parameter "phraselistId" is set
        if (params["phraselistId"] == null) {
            throw new Error("Missing required parameter phraselistId when calling featuresUpdatePhraselistFeature");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/phraselists/{phraselistId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"phraselistId"}}`, `${ params["phraselistId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["phraselistUpdateObject"]) {
            fetchOptions.body = JSON.stringify(params["phraselistUpdateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Adds a list of prebuilt entity extractors to the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param prebuiltExtractorNames An array of prebuilt entity extractor names.
     */
    modelsAddPrebuiltEntityExtractors(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "prebuiltExtractorNames"?: PrebuiltExtractorNames; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsAddPrebuiltEntityExtractors");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsAddPrebuiltEntityExtractors");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/prebuilts`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["prebuiltExtractorNames"]) {
            fetchOptions.body = JSON.stringify(params["prebuiltExtractorNames"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Adds a closed list model to the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param closedListModelCreateObject A model object containing the name and words for the new closed list entity extractor.
     */
    modelsCreateClosedListEntityModel(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "closedListModelCreateObject"?: ClosedListModelCreateObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsCreateClosedListEntityModel");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsCreateClosedListEntityModel");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/closedlists`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["closedListModelCreateObject"]) {
            fetchOptions.body = JSON.stringify(params["closedListModelCreateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Adds a composite entity extractor to the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param hierarchicalModelCreateObject A model object containing the name and children of the new entity extractor.
     */
    modelsCreateCompositeEntityExtractor(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "hierarchicalModelCreateObject"?: HierarchicalModelCreateObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsCreateCompositeEntityExtractor");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsCreateCompositeEntityExtractor");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/compositeentities`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["hierarchicalModelCreateObject"]) {
            fetchOptions.body = JSON.stringify(params["hierarchicalModelCreateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Adds an entity extractor to the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param modelCreateObject A model object containing the name for the new entity extractor.
     */
    modelsCreateEntityExtractor(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "modelCreateObject"?: ModelCreateObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsCreateEntityExtractor");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsCreateEntityExtractor");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/entities`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["modelCreateObject"]) {
            fetchOptions.body = JSON.stringify(params["modelCreateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Adds a hierarchical entity extractor to the application version.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param hierarchicalModelCreateObject A model object containing the name and children of the new entity extractor.
     */
    modelsCreateHierarchicalEntityExtractor(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "hierarchicalModelCreateObject"?: HierarchicalModelCreateObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsCreateHierarchicalEntityExtractor");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsCreateHierarchicalEntityExtractor");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/hierarchicalentities`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["hierarchicalModelCreateObject"]) {
            fetchOptions.body = JSON.stringify(params["hierarchicalModelCreateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Adds an intent classifier to the application.
     * @param appId Format - guid. ID of the application.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param modelCreateObject A model object containing the name of the new intent classifier.
     */
    modelsCreateIntentClassifier(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "modelCreateObject"?: ModelCreateObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsCreateIntentClassifier");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsCreateIntentClassifier");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/intents`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["modelCreateObject"]) {
            fetchOptions.body = JSON.stringify(params["modelCreateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Deletes a closed list model from the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param clEntityId Format - guid. The closed list entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeleteClosedListEntityModel(params: {  "appId": string; "versionId": string; "clEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsDeleteClosedListEntityModel");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsDeleteClosedListEntityModel");
        }
        // verify required parameter "clEntityId" is set
        if (params["clEntityId"] == null) {
            throw new Error("Missing required parameter clEntityId when calling modelsDeleteClosedListEntityModel");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/closedlists/{clEntityId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"clEntityId"}}`, `${ params["clEntityId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Deletes a composite entity extractor from the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param cEntityId Format - guid. The composite entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeleteCompositeEntityModel(params: {  "appId": string; "versionId": string; "cEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsDeleteCompositeEntityModel");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsDeleteCompositeEntityModel");
        }
        // verify required parameter "cEntityId" is set
        if (params["cEntityId"] == null) {
            throw new Error("Missing required parameter cEntityId when calling modelsDeleteCompositeEntityModel");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"cEntityId"}}`, `${ params["cEntityId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Deletes an entity extractor from the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param entityId Format - guid. The entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeleteEntityModel(params: {  "appId": string; "versionId": string; "entityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsDeleteEntityModel");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsDeleteEntityModel");
        }
        // verify required parameter "entityId" is set
        if (params["entityId"] == null) {
            throw new Error("Missing required parameter entityId when calling modelsDeleteEntityModel");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/entities/{entityId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"entityId"}}`, `${ params["entityId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Deletes a hierarchical entity extractor from the application version.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param hEntityId Format - guid. The hierarchical entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeleteHierarchicalEntityModel(params: {  "appId": string; "versionId": string; "hEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsDeleteHierarchicalEntityModel");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsDeleteHierarchicalEntityModel");
        }
        // verify required parameter "hEntityId" is set
        if (params["hEntityId"] == null) {
            throw new Error("Missing required parameter hEntityId when calling modelsDeleteHierarchicalEntityModel");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"hEntityId"}}`, `${ params["hEntityId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Deletes an intent classifier from the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param intentId Format - guid. The intent classifier ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeleteIntentModel(params: {  "appId": string; "versionId": string; "intentId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsDeleteIntentModel");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsDeleteIntentModel");
        }
        // verify required parameter "intentId" is set
        if (params["intentId"] == null) {
            throw new Error("Missing required parameter intentId when calling modelsDeleteIntentModel");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/intents/{intentId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"intentId"}}`, `${ params["intentId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Deletes a prebuilt entity extractor from the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param prebuiltId Format - guid. The prebuilt entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeletePrebuiltModel(params: {  "appId": string; "versionId": string; "prebuiltId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsDeletePrebuiltModel");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsDeletePrebuiltModel");
        }
        // verify required parameter "prebuiltId" is set
        if (params["prebuiltId"] == null) {
            throw new Error("Missing required parameter prebuiltId when calling modelsDeletePrebuiltModel");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/prebuilts/{prebuiltId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"prebuiltId"}}`, `${ params["prebuiltId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Deletes a sublist of a specific closed list model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param clEntityId Format - guid. The closed list entity extractor ID.
     * @param subListId The sublist ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeleteSubList(params: {  "appId": string; "versionId": string; "clEntityId": string; "subListId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsDeleteSubList");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsDeleteSubList");
        }
        // verify required parameter "clEntityId" is set
        if (params["clEntityId"] == null) {
            throw new Error("Missing required parameter clEntityId when calling modelsDeleteSubList");
        }
        // verify required parameter "subListId" is set
        if (params["subListId"] == null) {
            throw new Error("Missing required parameter subListId when calling modelsDeleteSubList");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists/{subListId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"clEntityId"}}`, `${ params["clEntityId"] }`)
            .replace(`{${"subListId"}}`, `${ params["subListId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets information about the closedlist models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionClosedListInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsGetApplicationVersionClosedListInfos");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsGetApplicationVersionClosedListInfos");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/closedlists`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets information about the composite entity models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionCompositeEntityInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsGetApplicationVersionCompositeEntityInfos");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsGetApplicationVersionCompositeEntityInfos");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/compositeentities`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets information about the entity models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionEntityInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsGetApplicationVersionEntityInfos");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsGetApplicationVersionEntityInfos");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/entities`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets information about the hierarchical entity models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionHierarchicalEntityInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsGetApplicationVersionHierarchicalEntityInfos");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsGetApplicationVersionHierarchicalEntityInfos");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/hierarchicalentities`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets information about the intent models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionIntentInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsGetApplicationVersionIntentInfos");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsGetApplicationVersionIntentInfos");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/intents`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets information about the application version models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionModelInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsGetApplicationVersionModelInfos");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsGetApplicationVersionModelInfos");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/models`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets information about the prebuilt entity models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionPrebuiltInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsGetApplicationVersionPrebuiltInfos");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsGetApplicationVersionPrebuiltInfos");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/prebuilts`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets all the available prebuilt entity extractors for the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetAvailablePrebuiltEntityExtractors(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsGetAvailablePrebuiltEntityExtractors");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsGetAvailablePrebuiltEntityExtractors");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/listprebuilts`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets information of a closed list model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param clEntityId Format - guid. The closed list model ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetClosedListEntityInfo(params: {  "appId": string; "versionId": string; "clEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsGetClosedListEntityInfo");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsGetClosedListEntityInfo");
        }
        // verify required parameter "clEntityId" is set
        if (params["clEntityId"] == null) {
            throw new Error("Missing required parameter clEntityId when calling modelsGetClosedListEntityInfo");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/closedlists/{clEntityId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"clEntityId"}}`, `${ params["clEntityId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets information about the composite entity model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param cEntityId Format - guid. The composite entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetCompositeEntityInfo(params: {  "appId": string; "versionId": string; "cEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsGetCompositeEntityInfo");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsGetCompositeEntityInfo");
        }
        // verify required parameter "cEntityId" is set
        if (params["cEntityId"] == null) {
            throw new Error("Missing required parameter cEntityId when calling modelsGetCompositeEntityInfo");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"cEntityId"}}`, `${ params["cEntityId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets information about the entity model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param entityId Format - guid. The entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetEntityInfo(params: {  "appId": string; "versionId": string; "entityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsGetEntityInfo");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsGetEntityInfo");
        }
        // verify required parameter "entityId" is set
        if (params["entityId"] == null) {
            throw new Error("Missing required parameter entityId when calling modelsGetEntityInfo");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/entities/{entityId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"entityId"}}`, `${ params["entityId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets information about the hierarchical entity model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param hEntityId Format - guid. The hierarchical entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetHierarchicalEntityInfo(params: {  "appId": string; "versionId": string; "hEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsGetHierarchicalEntityInfo");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsGetHierarchicalEntityInfo");
        }
        // verify required parameter "hEntityId" is set
        if (params["hEntityId"] == null) {
            throw new Error("Missing required parameter hEntityId when calling modelsGetHierarchicalEntityInfo");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"hEntityId"}}`, `${ params["hEntityId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets information about the intent model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param intentId Format - guid. The intent classifier ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetIntentInfo(params: {  "appId": string; "versionId": string; "intentId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsGetIntentInfo");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsGetIntentInfo");
        }
        // verify required parameter "intentId" is set
        if (params["intentId"] == null) {
            throw new Error("Missing required parameter intentId when calling modelsGetIntentInfo");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/intents/{intentId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"intentId"}}`, `${ params["intentId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets information about the prebuilt entity model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param prebuiltId Format - guid. The prebuilt entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetPrebuiltInfo(params: {  "appId": string; "versionId": string; "prebuiltId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsGetPrebuiltInfo");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsGetPrebuiltInfo");
        }
        // verify required parameter "prebuiltId" is set
        if (params["prebuiltId"] == null) {
            throw new Error("Missing required parameter prebuiltId when calling modelsGetPrebuiltInfo");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/prebuilts/{prebuiltId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"prebuiltId"}}`, `${ params["prebuiltId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Adds a batch of sublists to an existing closedlist.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param clEntityId Format - guid. The closed list entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param closedListModelPatchObject A json object containing words list batch.
     */
    modelsPatchClosedListEntityModel(params: {  "appId": string; "versionId": string; "clEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "closedListModelPatchObject"?: ClosedListModelPatchObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsPatchClosedListEntityModel");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsPatchClosedListEntityModel");
        }
        // verify required parameter "clEntityId" is set
        if (params["clEntityId"] == null) {
            throw new Error("Missing required parameter clEntityId when calling modelsPatchClosedListEntityModel");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/closedlists/{clEntityId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"clEntityId"}}`, `${ params["clEntityId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "PATCH" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["closedListModelPatchObject"]) {
            fetchOptions.body = JSON.stringify(params["closedListModelPatchObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Updates the name of an entity extractor.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param entityId Format - guid. The entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param modelUpdateObject A model object containing the new entity extractor name.
     */
    modelsRenameEntityModel(params: {  "appId": string; "versionId": string; "entityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "modelUpdateObject"?: ModelUpdateObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsRenameEntityModel");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsRenameEntityModel");
        }
        // verify required parameter "entityId" is set
        if (params["entityId"] == null) {
            throw new Error("Missing required parameter entityId when calling modelsRenameEntityModel");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/entities/{entityId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"entityId"}}`, `${ params["entityId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["modelUpdateObject"]) {
            fetchOptions.body = JSON.stringify(params["modelUpdateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Updates the name of an intent classifier.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param intentId Format - guid. The intent classifier ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param modelUpdateObject A model object containing the new intent classifier name.
     */
    modelsRenameIntentModel(params: {  "appId": string; "versionId": string; "intentId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "modelUpdateObject"?: ModelUpdateObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsRenameIntentModel");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsRenameIntentModel");
        }
        // verify required parameter "intentId" is set
        if (params["intentId"] == null) {
            throw new Error("Missing required parameter intentId when calling modelsRenameIntentModel");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/intents/{intentId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"intentId"}}`, `${ params["intentId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["modelUpdateObject"]) {
            fetchOptions.body = JSON.stringify(params["modelUpdateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Suggests examples that would improve the accuracy of the entity model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param entityId Format - guid. The target entity extractor model to enhance.
     * @param take Maximum number of queries to be returned. Default is set to 10. Maximum is 500.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsSuggestEndpointQueriesForEntities(params: {  "appId": string; "versionId": string; "entityId": string; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsSuggestEndpointQueriesForEntities");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsSuggestEndpointQueriesForEntities");
        }
        // verify required parameter "entityId" is set
        if (params["entityId"] == null) {
            throw new Error("Missing required parameter entityId when calling modelsSuggestEndpointQueriesForEntities");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/entities/{entityId}/suggest`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"entityId"}}`, `${ params["entityId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "take": params["take"],
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Suggests examples that would improve the accuracy of the intent model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param intentId Format - guid. The target intent classifier model to enhance.
     * @param take Maximum number of queries to be returned. Default is set to 10. Maximum is 500.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsSuggestEndpointQueriesForIntents(params: {  "appId": string; "versionId": string; "intentId": string; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsSuggestEndpointQueriesForIntents");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsSuggestEndpointQueriesForIntents");
        }
        // verify required parameter "intentId" is set
        if (params["intentId"] == null) {
            throw new Error("Missing required parameter intentId when calling modelsSuggestEndpointQueriesForIntents");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/intents/{intentId}/suggest`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"intentId"}}`, `${ params["intentId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "take": params["take"],
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Updates the closed list model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param clEntityId Format - guid. The closed list entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param closedListModelUpdateObject A json object containing the new entity name and words list.
     */
    modelsUpdateClosedListEntityModel(params: {  "appId": string; "versionId": string; "clEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "closedListModelUpdateObject"?: ClosedListModelUpdateObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsUpdateClosedListEntityModel");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsUpdateClosedListEntityModel");
        }
        // verify required parameter "clEntityId" is set
        if (params["clEntityId"] == null) {
            throw new Error("Missing required parameter clEntityId when calling modelsUpdateClosedListEntityModel");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/closedlists/{clEntityId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"clEntityId"}}`, `${ params["clEntityId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["closedListModelUpdateObject"]) {
            fetchOptions.body = JSON.stringify(params["closedListModelUpdateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Updates the composite entity extractor.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param cEntityId Format - guid. The composite entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param hierarchicalModelUpdateObject A model object containing the new entity extractor name and children.
     */
    modelsUpdateCompositeEntityModel(params: {  "appId": string; "versionId": string; "cEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "hierarchicalModelUpdateObject"?: HierarchicalModelUpdateObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsUpdateCompositeEntityModel");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsUpdateCompositeEntityModel");
        }
        // verify required parameter "cEntityId" is set
        if (params["cEntityId"] == null) {
            throw new Error("Missing required parameter cEntityId when calling modelsUpdateCompositeEntityModel");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"cEntityId"}}`, `${ params["cEntityId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["hierarchicalModelUpdateObject"]) {
            fetchOptions.body = JSON.stringify(params["hierarchicalModelUpdateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Updates the name and children of a hierarchical entity model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param hEntityId Format - guid. The hierarchical entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param hierarchicalModelUpdateObject Model containing names of the children of the hierarchical entity.
     */
    modelsUpdateHierarchicalEntityModel(params: {  "appId": string; "versionId": string; "hEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "hierarchicalModelUpdateObject"?: HierarchicalModelUpdateObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling modelsUpdateHierarchicalEntityModel");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling modelsUpdateHierarchicalEntityModel");
        }
        // verify required parameter "hEntityId" is set
        if (params["hEntityId"] == null) {
            throw new Error("Missing required parameter hEntityId when calling modelsUpdateHierarchicalEntityModel");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"hEntityId"}}`, `${ params["hEntityId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["hierarchicalModelUpdateObject"]) {
            fetchOptions.body = JSON.stringify(params["hierarchicalModelUpdateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets the training status of all models for the specified application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    trainGetApplicationVersionTrainingStatus(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling trainGetApplicationVersionTrainingStatus");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling trainGetApplicationVersionTrainingStatus");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/train`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Sends a training request for the models of the specified application version.&lt;/br&gt;The application version is not considered trained unless all the models either have been trained successfully or are up to date.&lt;/br&gt;&lt;b&gt;The user must get the training status at least once after training is completed.&lt;/b&gt;
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    trainTrainApplicationVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling trainTrainApplicationVersion");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling trainTrainApplicationVersion");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/train`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Adds an external API key to the user.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param externalKeyCreateObject External API key object.
     */
    userAddExternalApiKey(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "externalKeyCreateObject"?: ExternalKeyCreateObject; }, options?: any): FetchArgs {
        const baseUrl = `/externalKeys`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["externalKeyCreateObject"]) {
            fetchOptions.body = JSON.stringify(params["externalKeyCreateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Adds a subscription key to the user.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param userSubscriptionCreateObject Subscription key object.
     */
    userAddSubscriptionKey(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "userSubscriptionCreateObject"?: UserSubscriptionCreateObject; }, options?: any): FetchArgs {
        const baseUrl = `/subscriptions`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["userSubscriptionCreateObject"]) {
            fetchOptions.body = JSON.stringify(params["userSubscriptionCreateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Deletes a user external API key.
     * @param externalKeyValue The external API key.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    userDeleteExternalApiKey(params: {  "externalKeyValue": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "externalKeyValue" is set
        if (params["externalKeyValue"] == null) {
            throw new Error("Missing required parameter externalKeyValue when calling userDeleteExternalApiKey");
        }
        const baseUrl = `/externalKeys/{externalKeyValue}`
            .replace(`{${"externalKeyValue"}}`, `${ params["externalKeyValue"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Deletes a user subscription key.
     * @param subscriptionKey The subscription key.
     * @param subscriptionKey2 subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    userDeleteSubscriptionKey(params: {  "subscriptionKey": string; "subscriptionKey2"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "subscriptionKey" is set
        if (params["subscriptionKey"] == null) {
            throw new Error("Missing required parameter subscriptionKey when calling userDeleteSubscriptionKey");
        }
        const baseUrl = `/subscriptions/{subscriptionKey}`
            .replace(`{${"subscriptionKey"}}`, `${ params["subscriptionKey"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey2"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets a list of the user&#39;s external api keys.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    userGetUserExternalApiKeys(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/externalKeys`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets the user&#39;s endpoint subscription keys.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    userGetUserSubscriptionKeys(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/subscriptions`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Renames a subscription key owned by the user.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    userRenameSubscriptionKey(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/subscriptions`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Resets the user programmatic key.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    userResetProgrammaticKey(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/programmatickey`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Assigns a subscription key to the given application version.
     * @param appId Format - guid. The application version ID.
     * @param versionId The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param keyValue The value of the endpoint key to assign to the application.
     */
    versionsAssignSubscriptionKeyToVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "keyValue"?: KeyValue; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling versionsAssignSubscriptionKeyToVersion");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling versionsAssignSubscriptionKeyToVersion");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/assignedkey`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["keyValue"]) {
            fetchOptions.body = JSON.stringify(params["keyValue"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Creates a new version equivalent to the current snapshot of the selected application version.
     * @param appId Format - guid. The application ID.
     * @param versionId The application version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param taskUpdateObject An object containing the new version ID.
     */
    versionsCloneVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "taskUpdateObject"?: TaskUpdateObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling versionsCloneVersion");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling versionsCloneVersion");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/clone`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["taskUpdateObject"]) {
            fetchOptions.body = JSON.stringify(params["taskUpdateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Deletes an application version.
     * @param appId Format - guid. The application version ID.
     * @param versionId The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsDeleteApplicationVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling versionsDeleteApplicationVersion");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling versionsDeleteApplicationVersion");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Deletes an external API key currently associated to the given application according for the specified key type.
     * @param appId Format - guid. The application version ID.
     * @param versionId The application ID.
     * @param keyType The external key type.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsDeleteApplicationVersionExternalKey(params: {  "appId": string; "versionId": string; "keyType": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling versionsDeleteApplicationVersionExternalKey");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling versionsDeleteApplicationVersionExternalKey");
        }
        // verify required parameter "keyType" is set
        if (params["keyType"] == null) {
            throw new Error("Missing required parameter keyType when calling versionsDeleteApplicationVersionExternalKey");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/externalKeys/{keyType}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`)
            .replace(`{${"keyType"}}`, `${ params["keyType"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Deleted an unlabelled utterance.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsDeleteUnlabelledUtterance(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling versionsDeleteUnlabelledUtterance");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling versionsDeleteUnlabelledUtterance");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/suggest`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Exports a LUIS application to JSON format.
     * @param appId Format - guid. The application version ID.
     * @param versionId The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsExportApplicationVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling versionsExportApplicationVersion");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling versionsExportApplicationVersion");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/export`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets the task info.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsGetApplicationVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling versionsGetApplicationVersion");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling versionsGetApplicationVersion");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets the given application versions&#39;s external keys.
     * @param appId Format - guid. The application ID.
     * @param versionId The application version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsGetApplicationVersionExternalApiKeys(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling versionsGetApplicationVersionExternalApiKeys");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling versionsGetApplicationVersionExternalApiKeys");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/externalKeys`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets the given application version&#39;s subscription key.
     * @param appId Format - guid. The application version ID.
     * @param versionId The id of the app to get the key for.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsGetApplicationVersionSubscriptionKey(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling versionsGetApplicationVersionSubscriptionKey");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling versionsGetApplicationVersionSubscriptionKey");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/assignedkey`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Gets the application versions info.
     * @param appId Format - guid. The application ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsGetApplicationVersions(params: {  "appId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling versionsGetApplicationVersions");
        }
        const baseUrl = `/apps/{appId}/versions`
            .replace(`{${"appId"}}`, `${ params["appId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Imports a new version into a LUIS application, the version&#39;s JSON should be included in in the request body.
     * @param appId Format - guid. The application ID.
     * @param versionId The imported versionId.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param jSONApp A JSON representing the LUIS application structure.
     */
    versionsImportVersionToApplication(params: {  "appId": string; "versionId"?: string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "jSONApp"?: JSONApp; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling versionsImportVersionToApplication");
        }
        const baseUrl = `/apps/{appId}/versions/import`
            .replace(`{${"appId"}}`, `${ params["appId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "versionId": params["versionId"],
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["jSONApp"]) {
            fetchOptions.body = JSON.stringify(params["jSONApp"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Updates the name or description of the application version.
     * @param appId Format - guid. The application version ID.
     * @param versionId The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param taskUpdateObject A JSON object containing Name and Description of the application.
     */
    versionsRenameApplicationVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "taskUpdateObject"?: TaskUpdateObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling versionsRenameApplicationVersion");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling versionsRenameApplicationVersion");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["taskUpdateObject"]) {
            fetchOptions.body = JSON.stringify(params["taskUpdateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Assigns an external API key to the given application according to the specified key type.
     * @param appId Format - guid. The application version ID.
     * @param versionId The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param externalKeyUpdateObject The external api key to be assigned.
     */
    versionsUpdateApplicationVersionExternalKey(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "externalKeyUpdateObject"?: ExternalKeyUpdateObject; }, options?: any): FetchArgs {
        // verify required parameter "appId" is set
        if (params["appId"] == null) {
            throw new Error("Missing required parameter appId when calling versionsUpdateApplicationVersionExternalKey");
        }
        // verify required parameter "versionId" is set
        if (params["versionId"] == null) {
            throw new Error("Missing required parameter versionId when calling versionsUpdateApplicationVersionExternalKey");
        }
        const baseUrl = `/apps/{appId}/versions/{versionId}/externalKeys`
            .replace(`{${"appId"}}`, `${ params["appId"] }`)
            .replace(`{${"versionId"}}`, `${ params["versionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "subscription-key": params["subscriptionKey"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["externalKeyUpdateObject"]) {
            fetchOptions.body = JSON.stringify(params["externalKeyUpdateObject"] || {});
        }
        fetchOptions.headers = assign({
            "Ocp-Apim-Subscription-Key": params["ocpApimSubscriptionKey"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * DefaultApi - functional programming interface
 */
export const DefaultApiFp = {
    /** 
     * Creates a new application.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param applicationCreateObject A JSON object containing Name, Description (optional), Culture,              Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the application.              Default value for the version ID is 0.1.
     */
    appsAddApplication(params: { "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "applicationCreateObject"?: ApplicationCreateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.appsAddApplication(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Deletes an application.
     * @param appId Format - guid. The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsDeleteApplication(params: { "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.appsDeleteApplication(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets the query logs of the past month for the application.
     * @param appId Format - guid. The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsDownloadApplicationQueryLogs(params: { "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.appsDownloadApplicationQueryLogs(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets the supported application cultures.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetApplicationCultures(params: { "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.appsGetApplicationCultures(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets the available application domains.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetApplicationDomains(params: { "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.appsGetApplicationDomains(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets the application info.
     * @param appId Format - guid. The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetApplicationInfo(params: { "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.appsGetApplicationInfo(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get the application settings
     * @param appId Format - guid. The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetApplicationSettings(params: { "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.appsGetApplicationSettings(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets the application available usage scenarios.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetApplicationUsageScenarios(params: { "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.appsGetApplicationUsageScenarios(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets the endpoint URLs for the prebuilt Cortana applications.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetPersonalAssistantApplications(params: { "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.appsGetPersonalAssistantApplications(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Lists all of the user applications.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetUserApplications(params: { "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.appsGetUserApplications(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Imports an application to LUIS, the application&#39;s JSON should be included in in the request body.
     * @param appName The imported application name.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param jSONApp A JSON representing the LUIS application structure.
     */
    appsImportApplication(params: { "appName"?: string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "jSONApp"?: JSONApp;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.appsImportApplication(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Publishes a specific version of the application.
     * @param appId Format - guid. The application version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param applicationPublishObject The application publish object.
     */
    appsPublishApplication(params: { "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "applicationPublishObject"?: ApplicationPublishObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.appsPublishApplication(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Updates the name or description of the application.
     * @param appId Format - guid. The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param applicationUpdateObject A JSON object containing Name and Description of the application.
     */
    appsRenameApplication(params: { "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "applicationUpdateObject"?: ApplicationUpdateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.appsRenameApplication(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Updates the application settings
     * @param appId Format - guid. The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param applicationSettingUpdateObject An app setting object contains the new app settings
     */
    appsUpdateApplicationSettings(params: { "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "applicationSettingUpdateObject"?: ApplicationSettingUpdateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.appsUpdateApplicationSettings(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Adds a labeled example to the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param exampleLabelObject A JSON object containing the example label.
     */
    examplesAddLabel(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "exampleLabelObject"?: ExampleLabelObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.examplesAddLabel(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Adds a batch of labeled examples to the specified application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param exampleLabelObjectArray A JSON array containing example labels.
     */
    examplesBatchAddLabels(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "exampleLabelObjectArray"?: ExampleLabelObjectArray;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.examplesBatchAddLabels(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Deletes the label with the specified ID.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param exampleId The example ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    examplesDeleteExampleLabels(params: { "appId": string; "versionId": string; "exampleId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.examplesDeleteExampleLabels(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Returns examples to be reviewed.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    examplesReviewLabeledExamples(params: { "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.examplesReviewLabeledExamples(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Creates a new pattern feature.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param patternCreateObject A JSON object containing Name and Pattern of the feature.
     */
    featuresCreatePatternFeature(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "patternCreateObject"?: PatternCreateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.featuresCreatePatternFeature(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Creates a new phraselist feature.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param phraselistCreateObject A JSON object containing Name, comma-separated Phrases and the isExchangeable boolean.              Default value for isExchangeable is true.
     */
    featuresCreatePhraselistFeature(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "phraselistCreateObject"?: PhraselistCreateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.featuresCreatePhraselistFeature(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Deletes a pattern feature from an application version.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param patternId The ID of the pattern feature to be deleted.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresDeletePatternFeature(params: { "appId": string; "versionId": string; "patternId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.featuresDeletePatternFeature(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Deletes a phraselist feature from an application.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param phraselistId The ID of the feature to be deleted.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresDeletePhraselistFeature(params: { "appId": string; "versionId": string; "phraselistId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.featuresDeletePhraselistFeature(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets all application version features.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresGetApplicationVersionFeatures(params: { "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.featuresGetApplicationVersionFeatures(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets all application version pattern features.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresGetApplicationVersionPatternFeatures(params: { "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.featuresGetApplicationVersionPatternFeatures(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets all application phraselist features.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresGetApplicationVersionPhraselistFeatures(params: { "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.featuresGetApplicationVersionPhraselistFeatures(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets pattern feature info.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param patternId The pattern feature ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresGetPatternFeatureInfo(params: { "appId": string; "versionId": string; "patternId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.featuresGetPatternFeatureInfo(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets phraselist feature info.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param phraselistId The phraselist feature ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresGetPhraselistFeatureInfo(params: { "appId": string; "versionId": string; "phraselistId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.featuresGetPhraselistFeatureInfo(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Updates the pattern, the name and the state of the pattern feature.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param patternId The ID of the feature to be updated.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param patternUpdateObject A JSON object containing either:&lt;/br&gt;1- Just a boolean called IsActive, in which case the status of the feature will be changed.&lt;/br&gt;2- Name, Pattern and a boolean called IsActive to update the feature.
     */
    featuresUpdatePatternFeature(params: { "appId": string; "versionId": string; "patternId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "patternUpdateObject"?: PatternUpdateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.featuresUpdatePatternFeature(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Updates the phrases, the state and the name of the phraselist feature.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param phraselistId The ID of the feature to be updated.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param phraselistUpdateObject A JSON object containing either:&lt;/br&gt;1- Just a boolean called IsActive, in which case the status of the feature will be changed.&lt;/br&gt;2- Name, Pattern, Mode, and a boolean called IsActive to update the feature.
     */
    featuresUpdatePhraselistFeature(params: { "appId": string; "versionId": string; "phraselistId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "phraselistUpdateObject"?: PhraselistUpdateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.featuresUpdatePhraselistFeature(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Adds a list of prebuilt entity extractors to the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param prebuiltExtractorNames An array of prebuilt entity extractor names.
     */
    modelsAddPrebuiltEntityExtractors(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "prebuiltExtractorNames"?: PrebuiltExtractorNames;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsAddPrebuiltEntityExtractors(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Adds a closed list model to the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param closedListModelCreateObject A model object containing the name and words for the new closed list entity extractor.
     */
    modelsCreateClosedListEntityModel(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "closedListModelCreateObject"?: ClosedListModelCreateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsCreateClosedListEntityModel(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Adds a composite entity extractor to the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param hierarchicalModelCreateObject A model object containing the name and children of the new entity extractor.
     */
    modelsCreateCompositeEntityExtractor(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "hierarchicalModelCreateObject"?: HierarchicalModelCreateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsCreateCompositeEntityExtractor(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Adds an entity extractor to the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param modelCreateObject A model object containing the name for the new entity extractor.
     */
    modelsCreateEntityExtractor(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "modelCreateObject"?: ModelCreateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsCreateEntityExtractor(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Adds a hierarchical entity extractor to the application version.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param hierarchicalModelCreateObject A model object containing the name and children of the new entity extractor.
     */
    modelsCreateHierarchicalEntityExtractor(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "hierarchicalModelCreateObject"?: HierarchicalModelCreateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsCreateHierarchicalEntityExtractor(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Adds an intent classifier to the application.
     * @param appId Format - guid. ID of the application.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param modelCreateObject A model object containing the name of the new intent classifier.
     */
    modelsCreateIntentClassifier(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "modelCreateObject"?: ModelCreateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsCreateIntentClassifier(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Deletes a closed list model from the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param clEntityId Format - guid. The closed list entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeleteClosedListEntityModel(params: { "appId": string; "versionId": string; "clEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsDeleteClosedListEntityModel(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Deletes a composite entity extractor from the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param cEntityId Format - guid. The composite entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeleteCompositeEntityModel(params: { "appId": string; "versionId": string; "cEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsDeleteCompositeEntityModel(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Deletes an entity extractor from the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param entityId Format - guid. The entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeleteEntityModel(params: { "appId": string; "versionId": string; "entityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsDeleteEntityModel(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Deletes a hierarchical entity extractor from the application version.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param hEntityId Format - guid. The hierarchical entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeleteHierarchicalEntityModel(params: { "appId": string; "versionId": string; "hEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsDeleteHierarchicalEntityModel(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Deletes an intent classifier from the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param intentId Format - guid. The intent classifier ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeleteIntentModel(params: { "appId": string; "versionId": string; "intentId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsDeleteIntentModel(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Deletes a prebuilt entity extractor from the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param prebuiltId Format - guid. The prebuilt entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeletePrebuiltModel(params: { "appId": string; "versionId": string; "prebuiltId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsDeletePrebuiltModel(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Deletes a sublist of a specific closed list model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param clEntityId Format - guid. The closed list entity extractor ID.
     * @param subListId The sublist ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeleteSubList(params: { "appId": string; "versionId": string; "clEntityId": string; "subListId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsDeleteSubList(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets information about the closedlist models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionClosedListInfos(params: { "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsGetApplicationVersionClosedListInfos(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets information about the composite entity models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionCompositeEntityInfos(params: { "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsGetApplicationVersionCompositeEntityInfos(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets information about the entity models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionEntityInfos(params: { "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsGetApplicationVersionEntityInfos(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets information about the hierarchical entity models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionHierarchicalEntityInfos(params: { "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsGetApplicationVersionHierarchicalEntityInfos(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets information about the intent models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionIntentInfos(params: { "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsGetApplicationVersionIntentInfos(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets information about the application version models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionModelInfos(params: { "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsGetApplicationVersionModelInfos(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets information about the prebuilt entity models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionPrebuiltInfos(params: { "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsGetApplicationVersionPrebuiltInfos(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets all the available prebuilt entity extractors for the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetAvailablePrebuiltEntityExtractors(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsGetAvailablePrebuiltEntityExtractors(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets information of a closed list model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param clEntityId Format - guid. The closed list model ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetClosedListEntityInfo(params: { "appId": string; "versionId": string; "clEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsGetClosedListEntityInfo(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets information about the composite entity model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param cEntityId Format - guid. The composite entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetCompositeEntityInfo(params: { "appId": string; "versionId": string; "cEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsGetCompositeEntityInfo(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets information about the entity model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param entityId Format - guid. The entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetEntityInfo(params: { "appId": string; "versionId": string; "entityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsGetEntityInfo(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets information about the hierarchical entity model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param hEntityId Format - guid. The hierarchical entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetHierarchicalEntityInfo(params: { "appId": string; "versionId": string; "hEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsGetHierarchicalEntityInfo(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets information about the intent model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param intentId Format - guid. The intent classifier ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetIntentInfo(params: { "appId": string; "versionId": string; "intentId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsGetIntentInfo(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets information about the prebuilt entity model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param prebuiltId Format - guid. The prebuilt entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetPrebuiltInfo(params: { "appId": string; "versionId": string; "prebuiltId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsGetPrebuiltInfo(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Adds a batch of sublists to an existing closedlist.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param clEntityId Format - guid. The closed list entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param closedListModelPatchObject A json object containing words list batch.
     */
    modelsPatchClosedListEntityModel(params: { "appId": string; "versionId": string; "clEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "closedListModelPatchObject"?: ClosedListModelPatchObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsPatchClosedListEntityModel(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Updates the name of an entity extractor.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param entityId Format - guid. The entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param modelUpdateObject A model object containing the new entity extractor name.
     */
    modelsRenameEntityModel(params: { "appId": string; "versionId": string; "entityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "modelUpdateObject"?: ModelUpdateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsRenameEntityModel(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Updates the name of an intent classifier.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param intentId Format - guid. The intent classifier ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param modelUpdateObject A model object containing the new intent classifier name.
     */
    modelsRenameIntentModel(params: { "appId": string; "versionId": string; "intentId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "modelUpdateObject"?: ModelUpdateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsRenameIntentModel(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Suggests examples that would improve the accuracy of the entity model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param entityId Format - guid. The target entity extractor model to enhance.
     * @param take Maximum number of queries to be returned. Default is set to 10. Maximum is 500.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsSuggestEndpointQueriesForEntities(params: { "appId": string; "versionId": string; "entityId": string; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsSuggestEndpointQueriesForEntities(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Suggests examples that would improve the accuracy of the intent model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param intentId Format - guid. The target intent classifier model to enhance.
     * @param take Maximum number of queries to be returned. Default is set to 10. Maximum is 500.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsSuggestEndpointQueriesForIntents(params: { "appId": string; "versionId": string; "intentId": string; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsSuggestEndpointQueriesForIntents(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Updates the closed list model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param clEntityId Format - guid. The closed list entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param closedListModelUpdateObject A json object containing the new entity name and words list.
     */
    modelsUpdateClosedListEntityModel(params: { "appId": string; "versionId": string; "clEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "closedListModelUpdateObject"?: ClosedListModelUpdateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsUpdateClosedListEntityModel(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Updates the composite entity extractor.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param cEntityId Format - guid. The composite entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param hierarchicalModelUpdateObject A model object containing the new entity extractor name and children.
     */
    modelsUpdateCompositeEntityModel(params: { "appId": string; "versionId": string; "cEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "hierarchicalModelUpdateObject"?: HierarchicalModelUpdateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsUpdateCompositeEntityModel(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Updates the name and children of a hierarchical entity model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param hEntityId Format - guid. The hierarchical entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param hierarchicalModelUpdateObject Model containing names of the children of the hierarchical entity.
     */
    modelsUpdateHierarchicalEntityModel(params: { "appId": string; "versionId": string; "hEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "hierarchicalModelUpdateObject"?: HierarchicalModelUpdateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.modelsUpdateHierarchicalEntityModel(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets the training status of all models for the specified application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    trainGetApplicationVersionTrainingStatus(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.trainGetApplicationVersionTrainingStatus(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Sends a training request for the models of the specified application version.&lt;/br&gt;The application version is not considered trained unless all the models either have been trained successfully or are up to date.&lt;/br&gt;&lt;b&gt;The user must get the training status at least once after training is completed.&lt;/b&gt;
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    trainTrainApplicationVersion(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.trainTrainApplicationVersion(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Adds an external API key to the user.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param externalKeyCreateObject External API key object.
     */
    userAddExternalApiKey(params: { "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "externalKeyCreateObject"?: ExternalKeyCreateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.userAddExternalApiKey(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Adds a subscription key to the user.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param userSubscriptionCreateObject Subscription key object.
     */
    userAddSubscriptionKey(params: { "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "userSubscriptionCreateObject"?: UserSubscriptionCreateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.userAddSubscriptionKey(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Deletes a user external API key.
     * @param externalKeyValue The external API key.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    userDeleteExternalApiKey(params: { "externalKeyValue": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.userDeleteExternalApiKey(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Deletes a user subscription key.
     * @param subscriptionKey The subscription key.
     * @param subscriptionKey2 subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    userDeleteSubscriptionKey(params: { "subscriptionKey": string; "subscriptionKey2"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.userDeleteSubscriptionKey(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets a list of the user&#39;s external api keys.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    userGetUserExternalApiKeys(params: { "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.userGetUserExternalApiKeys(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets the user&#39;s endpoint subscription keys.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    userGetUserSubscriptionKeys(params: { "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.userGetUserSubscriptionKeys(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Renames a subscription key owned by the user.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    userRenameSubscriptionKey(params: { "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.userRenameSubscriptionKey(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Resets the user programmatic key.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    userResetProgrammaticKey(params: { "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.userResetProgrammaticKey(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Assigns a subscription key to the given application version.
     * @param appId Format - guid. The application version ID.
     * @param versionId The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param keyValue The value of the endpoint key to assign to the application.
     */
    versionsAssignSubscriptionKeyToVersion(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "keyValue"?: KeyValue;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.versionsAssignSubscriptionKeyToVersion(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Creates a new version equivalent to the current snapshot of the selected application version.
     * @param appId Format - guid. The application ID.
     * @param versionId The application version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param taskUpdateObject An object containing the new version ID.
     */
    versionsCloneVersion(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "taskUpdateObject"?: TaskUpdateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.versionsCloneVersion(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Deletes an application version.
     * @param appId Format - guid. The application version ID.
     * @param versionId The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsDeleteApplicationVersion(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.versionsDeleteApplicationVersion(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Deletes an external API key currently associated to the given application according for the specified key type.
     * @param appId Format - guid. The application version ID.
     * @param versionId The application ID.
     * @param keyType The external key type.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsDeleteApplicationVersionExternalKey(params: { "appId": string; "versionId": string; "keyType": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.versionsDeleteApplicationVersionExternalKey(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Deleted an unlabelled utterance.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsDeleteUnlabelledUtterance(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.versionsDeleteUnlabelledUtterance(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Exports a LUIS application to JSON format.
     * @param appId Format - guid. The application version ID.
     * @param versionId The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsExportApplicationVersion(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.versionsExportApplicationVersion(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets the task info.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsGetApplicationVersion(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.versionsGetApplicationVersion(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets the given application versions&#39;s external keys.
     * @param appId Format - guid. The application ID.
     * @param versionId The application version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsGetApplicationVersionExternalApiKeys(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.versionsGetApplicationVersionExternalApiKeys(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets the given application version&#39;s subscription key.
     * @param appId Format - guid. The application version ID.
     * @param versionId The id of the app to get the key for.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsGetApplicationVersionSubscriptionKey(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.versionsGetApplicationVersionSubscriptionKey(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Gets the application versions info.
     * @param appId Format - guid. The application ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsGetApplicationVersions(params: { "appId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.versionsGetApplicationVersions(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Imports a new version into a LUIS application, the version&#39;s JSON should be included in in the request body.
     * @param appId Format - guid. The application ID.
     * @param versionId The imported versionId.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param jSONApp A JSON representing the LUIS application structure.
     */
    versionsImportVersionToApplication(params: { "appId": string; "versionId"?: string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "jSONApp"?: JSONApp;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.versionsImportVersionToApplication(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Updates the name or description of the application version.
     * @param appId Format - guid. The application version ID.
     * @param versionId The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param taskUpdateObject A JSON object containing Name and Description of the application.
     */
    versionsRenameApplicationVersion(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "taskUpdateObject"?: TaskUpdateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.versionsRenameApplicationVersion(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Assigns an external API key to the given application according to the specified key type.
     * @param appId Format - guid. The application version ID.
     * @param versionId The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param externalKeyUpdateObject The external api key to be assigned.
     */
    versionsUpdateApplicationVersionExternalKey(params: { "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "externalKeyUpdateObject"?: ExternalKeyUpdateObject;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.versionsUpdateApplicationVersionExternalKey(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * DefaultApi - object-oriented interface
 */
export class DefaultApi extends BaseAPI {
    /** 
     * Creates a new application.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param applicationCreateObject A JSON object containing Name, Description (optional), Culture,              Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the application.              Default value for the version ID is 0.1.
     */
    appsAddApplication(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "applicationCreateObject"?: ApplicationCreateObject; }, options?: any) {
        return DefaultApiFp.appsAddApplication(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Deletes an application.
     * @param appId Format - guid. The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsDeleteApplication(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.appsDeleteApplication(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets the query logs of the past month for the application.
     * @param appId Format - guid. The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsDownloadApplicationQueryLogs(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.appsDownloadApplicationQueryLogs(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets the supported application cultures.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetApplicationCultures(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.appsGetApplicationCultures(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets the available application domains.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetApplicationDomains(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.appsGetApplicationDomains(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets the application info.
     * @param appId Format - guid. The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetApplicationInfo(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.appsGetApplicationInfo(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Get the application settings
     * @param appId Format - guid. The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetApplicationSettings(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.appsGetApplicationSettings(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets the application available usage scenarios.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetApplicationUsageScenarios(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.appsGetApplicationUsageScenarios(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets the endpoint URLs for the prebuilt Cortana applications.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetPersonalAssistantApplications(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.appsGetPersonalAssistantApplications(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Lists all of the user applications.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    appsGetUserApplications(params: {  "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.appsGetUserApplications(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Imports an application to LUIS, the application&#39;s JSON should be included in in the request body.
     * @param appName The imported application name.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param jSONApp A JSON representing the LUIS application structure.
     */
    appsImportApplication(params: {  "appName"?: string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "jSONApp"?: JSONApp; }, options?: any) {
        return DefaultApiFp.appsImportApplication(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Publishes a specific version of the application.
     * @param appId Format - guid. The application version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param applicationPublishObject The application publish object.
     */
    appsPublishApplication(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "applicationPublishObject"?: ApplicationPublishObject; }, options?: any) {
        return DefaultApiFp.appsPublishApplication(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Updates the name or description of the application.
     * @param appId Format - guid. The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param applicationUpdateObject A JSON object containing Name and Description of the application.
     */
    appsRenameApplication(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "applicationUpdateObject"?: ApplicationUpdateObject; }, options?: any) {
        return DefaultApiFp.appsRenameApplication(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Updates the application settings
     * @param appId Format - guid. The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param applicationSettingUpdateObject An app setting object contains the new app settings
     */
    appsUpdateApplicationSettings(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "applicationSettingUpdateObject"?: ApplicationSettingUpdateObject; }, options?: any) {
        return DefaultApiFp.appsUpdateApplicationSettings(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Adds a labeled example to the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param exampleLabelObject A JSON object containing the example label.
     */
    examplesAddLabel(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "exampleLabelObject"?: ExampleLabelObject; }, options?: any) {
        return DefaultApiFp.examplesAddLabel(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Adds a batch of labeled examples to the specified application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param exampleLabelObjectArray A JSON array containing example labels.
     */
    examplesBatchAddLabels(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "exampleLabelObjectArray"?: ExampleLabelObjectArray; }, options?: any) {
        return DefaultApiFp.examplesBatchAddLabels(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Deletes the label with the specified ID.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param exampleId The example ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    examplesDeleteExampleLabels(params: {  "appId": string; "versionId": string; "exampleId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.examplesDeleteExampleLabels(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Returns examples to be reviewed.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    examplesReviewLabeledExamples(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.examplesReviewLabeledExamples(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Creates a new pattern feature.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param patternCreateObject A JSON object containing Name and Pattern of the feature.
     */
    featuresCreatePatternFeature(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "patternCreateObject"?: PatternCreateObject; }, options?: any) {
        return DefaultApiFp.featuresCreatePatternFeature(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Creates a new phraselist feature.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param phraselistCreateObject A JSON object containing Name, comma-separated Phrases and the isExchangeable boolean.              Default value for isExchangeable is true.
     */
    featuresCreatePhraselistFeature(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "phraselistCreateObject"?: PhraselistCreateObject; }, options?: any) {
        return DefaultApiFp.featuresCreatePhraselistFeature(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Deletes a pattern feature from an application version.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param patternId The ID of the pattern feature to be deleted.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresDeletePatternFeature(params: {  "appId": string; "versionId": string; "patternId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.featuresDeletePatternFeature(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Deletes a phraselist feature from an application.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param phraselistId The ID of the feature to be deleted.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresDeletePhraselistFeature(params: {  "appId": string; "versionId": string; "phraselistId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.featuresDeletePhraselistFeature(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets all application version features.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresGetApplicationVersionFeatures(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.featuresGetApplicationVersionFeatures(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets all application version pattern features.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresGetApplicationVersionPatternFeatures(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.featuresGetApplicationVersionPatternFeatures(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets all application phraselist features.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresGetApplicationVersionPhraselistFeatures(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.featuresGetApplicationVersionPhraselistFeatures(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets pattern feature info.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param patternId The pattern feature ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresGetPatternFeatureInfo(params: {  "appId": string; "versionId": string; "patternId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.featuresGetPatternFeatureInfo(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets phraselist feature info.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param phraselistId The phraselist feature ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    featuresGetPhraselistFeatureInfo(params: {  "appId": string; "versionId": string; "phraselistId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.featuresGetPhraselistFeatureInfo(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Updates the pattern, the name and the state of the pattern feature.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param patternId The ID of the feature to be updated.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param patternUpdateObject A JSON object containing either:&lt;/br&gt;1- Just a boolean called IsActive, in which case the status of the feature will be changed.&lt;/br&gt;2- Name, Pattern and a boolean called IsActive to update the feature.
     */
    featuresUpdatePatternFeature(params: {  "appId": string; "versionId": string; "patternId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "patternUpdateObject"?: PatternUpdateObject; }, options?: any) {
        return DefaultApiFp.featuresUpdatePatternFeature(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Updates the phrases, the state and the name of the phraselist feature.
     * @param appId Format - guid. The application ID.
     * @param versionId The version ID of the task.
     * @param phraselistId The ID of the feature to be updated.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param phraselistUpdateObject A JSON object containing either:&lt;/br&gt;1- Just a boolean called IsActive, in which case the status of the feature will be changed.&lt;/br&gt;2- Name, Pattern, Mode, and a boolean called IsActive to update the feature.
     */
    featuresUpdatePhraselistFeature(params: {  "appId": string; "versionId": string; "phraselistId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "phraselistUpdateObject"?: PhraselistUpdateObject; }, options?: any) {
        return DefaultApiFp.featuresUpdatePhraselistFeature(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Adds a list of prebuilt entity extractors to the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param prebuiltExtractorNames An array of prebuilt entity extractor names.
     */
    modelsAddPrebuiltEntityExtractors(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "prebuiltExtractorNames"?: PrebuiltExtractorNames; }, options?: any) {
        return DefaultApiFp.modelsAddPrebuiltEntityExtractors(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Adds a closed list model to the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param closedListModelCreateObject A model object containing the name and words for the new closed list entity extractor.
     */
    modelsCreateClosedListEntityModel(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "closedListModelCreateObject"?: ClosedListModelCreateObject; }, options?: any) {
        return DefaultApiFp.modelsCreateClosedListEntityModel(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Adds a composite entity extractor to the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param hierarchicalModelCreateObject A model object containing the name and children of the new entity extractor.
     */
    modelsCreateCompositeEntityExtractor(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "hierarchicalModelCreateObject"?: HierarchicalModelCreateObject; }, options?: any) {
        return DefaultApiFp.modelsCreateCompositeEntityExtractor(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Adds an entity extractor to the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param modelCreateObject A model object containing the name for the new entity extractor.
     */
    modelsCreateEntityExtractor(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "modelCreateObject"?: ModelCreateObject; }, options?: any) {
        return DefaultApiFp.modelsCreateEntityExtractor(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Adds a hierarchical entity extractor to the application version.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param hierarchicalModelCreateObject A model object containing the name and children of the new entity extractor.
     */
    modelsCreateHierarchicalEntityExtractor(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "hierarchicalModelCreateObject"?: HierarchicalModelCreateObject; }, options?: any) {
        return DefaultApiFp.modelsCreateHierarchicalEntityExtractor(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Adds an intent classifier to the application.
     * @param appId Format - guid. ID of the application.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param modelCreateObject A model object containing the name of the new intent classifier.
     */
    modelsCreateIntentClassifier(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "modelCreateObject"?: ModelCreateObject; }, options?: any) {
        return DefaultApiFp.modelsCreateIntentClassifier(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Deletes a closed list model from the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param clEntityId Format - guid. The closed list entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeleteClosedListEntityModel(params: {  "appId": string; "versionId": string; "clEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsDeleteClosedListEntityModel(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Deletes a composite entity extractor from the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param cEntityId Format - guid. The composite entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeleteCompositeEntityModel(params: {  "appId": string; "versionId": string; "cEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsDeleteCompositeEntityModel(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Deletes an entity extractor from the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param entityId Format - guid. The entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeleteEntityModel(params: {  "appId": string; "versionId": string; "entityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsDeleteEntityModel(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Deletes a hierarchical entity extractor from the application version.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param hEntityId Format - guid. The hierarchical entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeleteHierarchicalEntityModel(params: {  "appId": string; "versionId": string; "hEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsDeleteHierarchicalEntityModel(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Deletes an intent classifier from the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param intentId Format - guid. The intent classifier ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeleteIntentModel(params: {  "appId": string; "versionId": string; "intentId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsDeleteIntentModel(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Deletes a prebuilt entity extractor from the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param prebuiltId Format - guid. The prebuilt entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeletePrebuiltModel(params: {  "appId": string; "versionId": string; "prebuiltId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsDeletePrebuiltModel(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Deletes a sublist of a specific closed list model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param clEntityId Format - guid. The closed list entity extractor ID.
     * @param subListId The sublist ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsDeleteSubList(params: {  "appId": string; "versionId": string; "clEntityId": string; "subListId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsDeleteSubList(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets information about the closedlist models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionClosedListInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsGetApplicationVersionClosedListInfos(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets information about the composite entity models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionCompositeEntityInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsGetApplicationVersionCompositeEntityInfos(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets information about the entity models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionEntityInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsGetApplicationVersionEntityInfos(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets information about the hierarchical entity models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionHierarchicalEntityInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsGetApplicationVersionHierarchicalEntityInfos(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets information about the intent models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionIntentInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsGetApplicationVersionIntentInfos(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets information about the application version models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionModelInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsGetApplicationVersionModelInfos(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets information about the prebuilt entity models.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetApplicationVersionPrebuiltInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsGetApplicationVersionPrebuiltInfos(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets all the available prebuilt entity extractors for the application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetAvailablePrebuiltEntityExtractors(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsGetAvailablePrebuiltEntityExtractors(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets information of a closed list model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param clEntityId Format - guid. The closed list model ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetClosedListEntityInfo(params: {  "appId": string; "versionId": string; "clEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsGetClosedListEntityInfo(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets information about the composite entity model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param cEntityId Format - guid. The composite entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetCompositeEntityInfo(params: {  "appId": string; "versionId": string; "cEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsGetCompositeEntityInfo(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets information about the entity model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param entityId Format - guid. The entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetEntityInfo(params: {  "appId": string; "versionId": string; "entityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsGetEntityInfo(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets information about the hierarchical entity model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param hEntityId Format - guid. The hierarchical entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetHierarchicalEntityInfo(params: {  "appId": string; "versionId": string; "hEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsGetHierarchicalEntityInfo(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets information about the intent model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param intentId Format - guid. The intent classifier ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetIntentInfo(params: {  "appId": string; "versionId": string; "intentId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsGetIntentInfo(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets information about the prebuilt entity model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param prebuiltId Format - guid. The prebuilt entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsGetPrebuiltInfo(params: {  "appId": string; "versionId": string; "prebuiltId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsGetPrebuiltInfo(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Adds a batch of sublists to an existing closedlist.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param clEntityId Format - guid. The closed list entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param closedListModelPatchObject A json object containing words list batch.
     */
    modelsPatchClosedListEntityModel(params: {  "appId": string; "versionId": string; "clEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "closedListModelPatchObject"?: ClosedListModelPatchObject; }, options?: any) {
        return DefaultApiFp.modelsPatchClosedListEntityModel(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Updates the name of an entity extractor.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param entityId Format - guid. The entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param modelUpdateObject A model object containing the new entity extractor name.
     */
    modelsRenameEntityModel(params: {  "appId": string; "versionId": string; "entityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "modelUpdateObject"?: ModelUpdateObject; }, options?: any) {
        return DefaultApiFp.modelsRenameEntityModel(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Updates the name of an intent classifier.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param intentId Format - guid. The intent classifier ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param modelUpdateObject A model object containing the new intent classifier name.
     */
    modelsRenameIntentModel(params: {  "appId": string; "versionId": string; "intentId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "modelUpdateObject"?: ModelUpdateObject; }, options?: any) {
        return DefaultApiFp.modelsRenameIntentModel(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Suggests examples that would improve the accuracy of the entity model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param entityId Format - guid. The target entity extractor model to enhance.
     * @param take Maximum number of queries to be returned. Default is set to 10. Maximum is 500.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsSuggestEndpointQueriesForEntities(params: {  "appId": string; "versionId": string; "entityId": string; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsSuggestEndpointQueriesForEntities(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Suggests examples that would improve the accuracy of the intent model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param intentId Format - guid. The target intent classifier model to enhance.
     * @param take Maximum number of queries to be returned. Default is set to 10. Maximum is 500.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    modelsSuggestEndpointQueriesForIntents(params: {  "appId": string; "versionId": string; "intentId": string; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.modelsSuggestEndpointQueriesForIntents(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Updates the closed list model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param clEntityId Format - guid. The closed list entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param closedListModelUpdateObject A json object containing the new entity name and words list.
     */
    modelsUpdateClosedListEntityModel(params: {  "appId": string; "versionId": string; "clEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "closedListModelUpdateObject"?: ClosedListModelUpdateObject; }, options?: any) {
        return DefaultApiFp.modelsUpdateClosedListEntityModel(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Updates the composite entity extractor.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param cEntityId Format - guid. The composite entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param hierarchicalModelUpdateObject A model object containing the new entity extractor name and children.
     */
    modelsUpdateCompositeEntityModel(params: {  "appId": string; "versionId": string; "cEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "hierarchicalModelUpdateObject"?: HierarchicalModelUpdateObject; }, options?: any) {
        return DefaultApiFp.modelsUpdateCompositeEntityModel(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Updates the name and children of a hierarchical entity model.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param hEntityId Format - guid. The hierarchical entity extractor ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param hierarchicalModelUpdateObject Model containing names of the children of the hierarchical entity.
     */
    modelsUpdateHierarchicalEntityModel(params: {  "appId": string; "versionId": string; "hEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "hierarchicalModelUpdateObject"?: HierarchicalModelUpdateObject; }, options?: any) {
        return DefaultApiFp.modelsUpdateHierarchicalEntityModel(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets the training status of all models for the specified application.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    trainGetApplicationVersionTrainingStatus(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.trainGetApplicationVersionTrainingStatus(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Sends a training request for the models of the specified application version.&lt;/br&gt;The application version is not considered trained unless all the models either have been trained successfully or are up to date.&lt;/br&gt;&lt;b&gt;The user must get the training status at least once after training is completed.&lt;/b&gt;
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    trainTrainApplicationVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.trainTrainApplicationVersion(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Adds an external API key to the user.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param externalKeyCreateObject External API key object.
     */
    userAddExternalApiKey(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "externalKeyCreateObject"?: ExternalKeyCreateObject; }, options?: any) {
        return DefaultApiFp.userAddExternalApiKey(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Adds a subscription key to the user.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param userSubscriptionCreateObject Subscription key object.
     */
    userAddSubscriptionKey(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "userSubscriptionCreateObject"?: UserSubscriptionCreateObject; }, options?: any) {
        return DefaultApiFp.userAddSubscriptionKey(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Deletes a user external API key.
     * @param externalKeyValue The external API key.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    userDeleteExternalApiKey(params: {  "externalKeyValue": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.userDeleteExternalApiKey(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Deletes a user subscription key.
     * @param subscriptionKey The subscription key.
     * @param subscriptionKey2 subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    userDeleteSubscriptionKey(params: {  "subscriptionKey": string; "subscriptionKey2"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.userDeleteSubscriptionKey(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets a list of the user&#39;s external api keys.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    userGetUserExternalApiKeys(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.userGetUserExternalApiKeys(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets the user&#39;s endpoint subscription keys.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    userGetUserSubscriptionKeys(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.userGetUserSubscriptionKeys(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Renames a subscription key owned by the user.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    userRenameSubscriptionKey(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.userRenameSubscriptionKey(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Resets the user programmatic key.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    userResetProgrammaticKey(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.userResetProgrammaticKey(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Assigns a subscription key to the given application version.
     * @param appId Format - guid. The application version ID.
     * @param versionId The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param keyValue The value of the endpoint key to assign to the application.
     */
    versionsAssignSubscriptionKeyToVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "keyValue"?: KeyValue; }, options?: any) {
        return DefaultApiFp.versionsAssignSubscriptionKeyToVersion(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Creates a new version equivalent to the current snapshot of the selected application version.
     * @param appId Format - guid. The application ID.
     * @param versionId The application version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param taskUpdateObject An object containing the new version ID.
     */
    versionsCloneVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "taskUpdateObject"?: TaskUpdateObject; }, options?: any) {
        return DefaultApiFp.versionsCloneVersion(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Deletes an application version.
     * @param appId Format - guid. The application version ID.
     * @param versionId The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsDeleteApplicationVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.versionsDeleteApplicationVersion(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Deletes an external API key currently associated to the given application according for the specified key type.
     * @param appId Format - guid. The application version ID.
     * @param versionId The application ID.
     * @param keyType The external key type.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsDeleteApplicationVersionExternalKey(params: {  "appId": string; "versionId": string; "keyType": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.versionsDeleteApplicationVersionExternalKey(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Deleted an unlabelled utterance.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsDeleteUnlabelledUtterance(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.versionsDeleteUnlabelledUtterance(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Exports a LUIS application to JSON format.
     * @param appId Format - guid. The application version ID.
     * @param versionId The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsExportApplicationVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.versionsExportApplicationVersion(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets the task info.
     * @param appId Format - guid. The application ID.
     * @param versionId The task version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsGetApplicationVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.versionsGetApplicationVersion(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets the given application versions&#39;s external keys.
     * @param appId Format - guid. The application ID.
     * @param versionId The application version ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsGetApplicationVersionExternalApiKeys(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.versionsGetApplicationVersionExternalApiKeys(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets the given application version&#39;s subscription key.
     * @param appId Format - guid. The application version ID.
     * @param versionId The id of the app to get the key for.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsGetApplicationVersionSubscriptionKey(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.versionsGetApplicationVersionSubscriptionKey(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Gets the application versions info.
     * @param appId Format - guid. The application ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     */
    versionsGetApplicationVersions(params: {  "appId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
        return DefaultApiFp.versionsGetApplicationVersions(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Imports a new version into a LUIS application, the version&#39;s JSON should be included in in the request body.
     * @param appId Format - guid. The application ID.
     * @param versionId The imported versionId.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param jSONApp A JSON representing the LUIS application structure.
     */
    versionsImportVersionToApplication(params: {  "appId": string; "versionId"?: string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "jSONApp"?: JSONApp; }, options?: any) {
        return DefaultApiFp.versionsImportVersionToApplication(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Updates the name or description of the application version.
     * @param appId Format - guid. The application version ID.
     * @param versionId The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param taskUpdateObject A JSON object containing Name and Description of the application.
     */
    versionsRenameApplicationVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "taskUpdateObject"?: TaskUpdateObject; }, options?: any) {
        return DefaultApiFp.versionsRenameApplicationVersion(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Assigns an external API key to the given application according to the specified key type.
     * @param appId Format - guid. The application version ID.
     * @param versionId The application ID.
     * @param subscriptionKey subscription key in url
     * @param ocpApimSubscriptionKey subscription key in header
     * @param externalKeyUpdateObject The external api key to be assigned.
     */
    versionsUpdateApplicationVersionExternalKey(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "externalKeyUpdateObject"?: ExternalKeyUpdateObject; }, options?: any) {
        return DefaultApiFp.versionsUpdateApplicationVersionExternalKey(params, options)(this.fetch, this.basePath);
    }
};

/**
 * DefaultApi - factory interface
 */
export const DefaultApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /** 
         * Creates a new application.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param applicationCreateObject A JSON object containing Name, Description (optional), Culture,              Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the application.              Default value for the version ID is 0.1.
         */
        appsAddApplication(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "applicationCreateObject"?: ApplicationCreateObject; }, options?: any) {
            return DefaultApiFp.appsAddApplication(params, options)(fetch, basePath);
        },
        /** 
         * Deletes an application.
         * @param appId Format - guid. The application ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        appsDeleteApplication(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.appsDeleteApplication(params, options)(fetch, basePath);
        },
        /** 
         * Gets the query logs of the past month for the application.
         * @param appId Format - guid. The application ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        appsDownloadApplicationQueryLogs(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.appsDownloadApplicationQueryLogs(params, options)(fetch, basePath);
        },
        /** 
         * Gets the supported application cultures.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        appsGetApplicationCultures(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.appsGetApplicationCultures(params, options)(fetch, basePath);
        },
        /** 
         * Gets the available application domains.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        appsGetApplicationDomains(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.appsGetApplicationDomains(params, options)(fetch, basePath);
        },
        /** 
         * Gets the application info.
         * @param appId Format - guid. The application ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        appsGetApplicationInfo(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.appsGetApplicationInfo(params, options)(fetch, basePath);
        },
        /** 
         * Get the application settings
         * @param appId Format - guid. The application ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        appsGetApplicationSettings(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.appsGetApplicationSettings(params, options)(fetch, basePath);
        },
        /** 
         * Gets the application available usage scenarios.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        appsGetApplicationUsageScenarios(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.appsGetApplicationUsageScenarios(params, options)(fetch, basePath);
        },
        /** 
         * Gets the endpoint URLs for the prebuilt Cortana applications.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        appsGetPersonalAssistantApplications(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.appsGetPersonalAssistantApplications(params, options)(fetch, basePath);
        },
        /** 
         * Lists all of the user applications.
         * @param skip The number of entries to skip. Default value is 0.
         * @param take The number of entries to return. Maximum page size is 500. Default is 100.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        appsGetUserApplications(params: {  "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.appsGetUserApplications(params, options)(fetch, basePath);
        },
        /** 
         * Imports an application to LUIS, the application&#39;s JSON should be included in in the request body.
         * @param appName The imported application name.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param jSONApp A JSON representing the LUIS application structure.
         */
        appsImportApplication(params: {  "appName"?: string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "jSONApp"?: JSONApp; }, options?: any) {
            return DefaultApiFp.appsImportApplication(params, options)(fetch, basePath);
        },
        /** 
         * Publishes a specific version of the application.
         * @param appId Format - guid. The application version ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param applicationPublishObject The application publish object.
         */
        appsPublishApplication(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "applicationPublishObject"?: ApplicationPublishObject; }, options?: any) {
            return DefaultApiFp.appsPublishApplication(params, options)(fetch, basePath);
        },
        /** 
         * Updates the name or description of the application.
         * @param appId Format - guid. The application ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param applicationUpdateObject A JSON object containing Name and Description of the application.
         */
        appsRenameApplication(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "applicationUpdateObject"?: ApplicationUpdateObject; }, options?: any) {
            return DefaultApiFp.appsRenameApplication(params, options)(fetch, basePath);
        },
        /** 
         * Updates the application settings
         * @param appId Format - guid. The application ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param applicationSettingUpdateObject An app setting object contains the new app settings
         */
        appsUpdateApplicationSettings(params: {  "appId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "applicationSettingUpdateObject"?: ApplicationSettingUpdateObject; }, options?: any) {
            return DefaultApiFp.appsUpdateApplicationSettings(params, options)(fetch, basePath);
        },
        /** 
         * Adds a labeled example to the application.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param exampleLabelObject A JSON object containing the example label.
         */
        examplesAddLabel(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "exampleLabelObject"?: ExampleLabelObject; }, options?: any) {
            return DefaultApiFp.examplesAddLabel(params, options)(fetch, basePath);
        },
        /** 
         * Adds a batch of labeled examples to the specified application.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param exampleLabelObjectArray A JSON array containing example labels.
         */
        examplesBatchAddLabels(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "exampleLabelObjectArray"?: ExampleLabelObjectArray; }, options?: any) {
            return DefaultApiFp.examplesBatchAddLabels(params, options)(fetch, basePath);
        },
        /** 
         * Deletes the label with the specified ID.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param exampleId The example ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        examplesDeleteExampleLabels(params: {  "appId": string; "versionId": string; "exampleId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.examplesDeleteExampleLabels(params, options)(fetch, basePath);
        },
        /** 
         * Returns examples to be reviewed.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param skip The number of entries to skip. Default value is 0.
         * @param take The number of entries to return. Maximum page size is 500. Default is 100.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        examplesReviewLabeledExamples(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.examplesReviewLabeledExamples(params, options)(fetch, basePath);
        },
        /** 
         * Creates a new pattern feature.
         * @param appId Format - guid. The application ID.
         * @param versionId The version ID of the task.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param patternCreateObject A JSON object containing Name and Pattern of the feature.
         */
        featuresCreatePatternFeature(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "patternCreateObject"?: PatternCreateObject; }, options?: any) {
            return DefaultApiFp.featuresCreatePatternFeature(params, options)(fetch, basePath);
        },
        /** 
         * Creates a new phraselist feature.
         * @param appId Format - guid. The application ID.
         * @param versionId The version ID of the task.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param phraselistCreateObject A JSON object containing Name, comma-separated Phrases and the isExchangeable boolean.              Default value for isExchangeable is true.
         */
        featuresCreatePhraselistFeature(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "phraselistCreateObject"?: PhraselistCreateObject; }, options?: any) {
            return DefaultApiFp.featuresCreatePhraselistFeature(params, options)(fetch, basePath);
        },
        /** 
         * Deletes a pattern feature from an application version.
         * @param appId Format - guid. The application ID.
         * @param versionId The version ID of the task.
         * @param patternId The ID of the pattern feature to be deleted.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        featuresDeletePatternFeature(params: {  "appId": string; "versionId": string; "patternId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.featuresDeletePatternFeature(params, options)(fetch, basePath);
        },
        /** 
         * Deletes a phraselist feature from an application.
         * @param appId Format - guid. The application ID.
         * @param versionId The version ID of the task.
         * @param phraselistId The ID of the feature to be deleted.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        featuresDeletePhraselistFeature(params: {  "appId": string; "versionId": string; "phraselistId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.featuresDeletePhraselistFeature(params, options)(fetch, basePath);
        },
        /** 
         * Gets all application version features.
         * @param appId Format - guid. The application ID.
         * @param versionId The version ID of the task.
         * @param skip The number of entries to skip. Default value is 0.
         * @param take The number of entries to return. Maximum page size is 500. Default is 100.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        featuresGetApplicationVersionFeatures(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.featuresGetApplicationVersionFeatures(params, options)(fetch, basePath);
        },
        /** 
         * Gets all application version pattern features.
         * @param appId Format - guid. The application ID.
         * @param versionId The version ID of the task.
         * @param skip The number of entries to skip. Default value is 0.
         * @param take The number of entries to return. Maximum page size is 500. Default is 100.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        featuresGetApplicationVersionPatternFeatures(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.featuresGetApplicationVersionPatternFeatures(params, options)(fetch, basePath);
        },
        /** 
         * Gets all application phraselist features.
         * @param appId Format - guid. The application ID.
         * @param versionId The version ID of the task.
         * @param skip The number of entries to skip. Default value is 0.
         * @param take The number of entries to return. Maximum page size is 500. Default is 100.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        featuresGetApplicationVersionPhraselistFeatures(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.featuresGetApplicationVersionPhraselistFeatures(params, options)(fetch, basePath);
        },
        /** 
         * Gets pattern feature info.
         * @param appId Format - guid. The application ID.
         * @param versionId The version ID of the task.
         * @param patternId The pattern feature ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        featuresGetPatternFeatureInfo(params: {  "appId": string; "versionId": string; "patternId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.featuresGetPatternFeatureInfo(params, options)(fetch, basePath);
        },
        /** 
         * Gets phraselist feature info.
         * @param appId Format - guid. The application ID.
         * @param versionId The version ID of the task.
         * @param phraselistId The phraselist feature ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        featuresGetPhraselistFeatureInfo(params: {  "appId": string; "versionId": string; "phraselistId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.featuresGetPhraselistFeatureInfo(params, options)(fetch, basePath);
        },
        /** 
         * Updates the pattern, the name and the state of the pattern feature.
         * @param appId Format - guid. The application ID.
         * @param versionId The version ID of the task.
         * @param patternId The ID of the feature to be updated.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param patternUpdateObject A JSON object containing either:&lt;/br&gt;1- Just a boolean called IsActive, in which case the status of the feature will be changed.&lt;/br&gt;2- Name, Pattern and a boolean called IsActive to update the feature.
         */
        featuresUpdatePatternFeature(params: {  "appId": string; "versionId": string; "patternId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "patternUpdateObject"?: PatternUpdateObject; }, options?: any) {
            return DefaultApiFp.featuresUpdatePatternFeature(params, options)(fetch, basePath);
        },
        /** 
         * Updates the phrases, the state and the name of the phraselist feature.
         * @param appId Format - guid. The application ID.
         * @param versionId The version ID of the task.
         * @param phraselistId The ID of the feature to be updated.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param phraselistUpdateObject A JSON object containing either:&lt;/br&gt;1- Just a boolean called IsActive, in which case the status of the feature will be changed.&lt;/br&gt;2- Name, Pattern, Mode, and a boolean called IsActive to update the feature.
         */
        featuresUpdatePhraselistFeature(params: {  "appId": string; "versionId": string; "phraselistId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "phraselistUpdateObject"?: PhraselistUpdateObject; }, options?: any) {
            return DefaultApiFp.featuresUpdatePhraselistFeature(params, options)(fetch, basePath);
        },
        /** 
         * Adds a list of prebuilt entity extractors to the application.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param prebuiltExtractorNames An array of prebuilt entity extractor names.
         */
        modelsAddPrebuiltEntityExtractors(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "prebuiltExtractorNames"?: PrebuiltExtractorNames; }, options?: any) {
            return DefaultApiFp.modelsAddPrebuiltEntityExtractors(params, options)(fetch, basePath);
        },
        /** 
         * Adds a closed list model to the application.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param closedListModelCreateObject A model object containing the name and words for the new closed list entity extractor.
         */
        modelsCreateClosedListEntityModel(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "closedListModelCreateObject"?: ClosedListModelCreateObject; }, options?: any) {
            return DefaultApiFp.modelsCreateClosedListEntityModel(params, options)(fetch, basePath);
        },
        /** 
         * Adds a composite entity extractor to the application.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param hierarchicalModelCreateObject A model object containing the name and children of the new entity extractor.
         */
        modelsCreateCompositeEntityExtractor(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "hierarchicalModelCreateObject"?: HierarchicalModelCreateObject; }, options?: any) {
            return DefaultApiFp.modelsCreateCompositeEntityExtractor(params, options)(fetch, basePath);
        },
        /** 
         * Adds an entity extractor to the application.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param modelCreateObject A model object containing the name for the new entity extractor.
         */
        modelsCreateEntityExtractor(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "modelCreateObject"?: ModelCreateObject; }, options?: any) {
            return DefaultApiFp.modelsCreateEntityExtractor(params, options)(fetch, basePath);
        },
        /** 
         * Adds a hierarchical entity extractor to the application version.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param hierarchicalModelCreateObject A model object containing the name and children of the new entity extractor.
         */
        modelsCreateHierarchicalEntityExtractor(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "hierarchicalModelCreateObject"?: HierarchicalModelCreateObject; }, options?: any) {
            return DefaultApiFp.modelsCreateHierarchicalEntityExtractor(params, options)(fetch, basePath);
        },
        /** 
         * Adds an intent classifier to the application.
         * @param appId Format - guid. ID of the application.
         * @param versionId The task version ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param modelCreateObject A model object containing the name of the new intent classifier.
         */
        modelsCreateIntentClassifier(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "modelCreateObject"?: ModelCreateObject; }, options?: any) {
            return DefaultApiFp.modelsCreateIntentClassifier(params, options)(fetch, basePath);
        },
        /** 
         * Deletes a closed list model from the application.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param clEntityId Format - guid. The closed list entity extractor ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsDeleteClosedListEntityModel(params: {  "appId": string; "versionId": string; "clEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsDeleteClosedListEntityModel(params, options)(fetch, basePath);
        },
        /** 
         * Deletes a composite entity extractor from the application.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param cEntityId Format - guid. The composite entity extractor ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsDeleteCompositeEntityModel(params: {  "appId": string; "versionId": string; "cEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsDeleteCompositeEntityModel(params, options)(fetch, basePath);
        },
        /** 
         * Deletes an entity extractor from the application.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param entityId Format - guid. The entity extractor ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsDeleteEntityModel(params: {  "appId": string; "versionId": string; "entityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsDeleteEntityModel(params, options)(fetch, basePath);
        },
        /** 
         * Deletes a hierarchical entity extractor from the application version.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param hEntityId Format - guid. The hierarchical entity extractor ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsDeleteHierarchicalEntityModel(params: {  "appId": string; "versionId": string; "hEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsDeleteHierarchicalEntityModel(params, options)(fetch, basePath);
        },
        /** 
         * Deletes an intent classifier from the application.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param intentId Format - guid. The intent classifier ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsDeleteIntentModel(params: {  "appId": string; "versionId": string; "intentId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsDeleteIntentModel(params, options)(fetch, basePath);
        },
        /** 
         * Deletes a prebuilt entity extractor from the application.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param prebuiltId Format - guid. The prebuilt entity extractor ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsDeletePrebuiltModel(params: {  "appId": string; "versionId": string; "prebuiltId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsDeletePrebuiltModel(params, options)(fetch, basePath);
        },
        /** 
         * Deletes a sublist of a specific closed list model.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param clEntityId Format - guid. The closed list entity extractor ID.
         * @param subListId The sublist ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsDeleteSubList(params: {  "appId": string; "versionId": string; "clEntityId": string; "subListId": number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsDeleteSubList(params, options)(fetch, basePath);
        },
        /** 
         * Gets information about the closedlist models.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param skip The number of entries to skip. Default value is 0.
         * @param take The number of entries to return. Maximum page size is 500. Default is 100.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsGetApplicationVersionClosedListInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsGetApplicationVersionClosedListInfos(params, options)(fetch, basePath);
        },
        /** 
         * Gets information about the composite entity models.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param skip The number of entries to skip. Default value is 0.
         * @param take The number of entries to return. Maximum page size is 500. Default is 100.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsGetApplicationVersionCompositeEntityInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsGetApplicationVersionCompositeEntityInfos(params, options)(fetch, basePath);
        },
        /** 
         * Gets information about the entity models.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param skip The number of entries to skip. Default value is 0.
         * @param take The number of entries to return. Maximum page size is 500. Default is 100.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsGetApplicationVersionEntityInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsGetApplicationVersionEntityInfos(params, options)(fetch, basePath);
        },
        /** 
         * Gets information about the hierarchical entity models.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param skip The number of entries to skip. Default value is 0.
         * @param take The number of entries to return. Maximum page size is 500. Default is 100.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsGetApplicationVersionHierarchicalEntityInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsGetApplicationVersionHierarchicalEntityInfos(params, options)(fetch, basePath);
        },
        /** 
         * Gets information about the intent models.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param skip The number of entries to skip. Default value is 0.
         * @param take The number of entries to return. Maximum page size is 500. Default is 100.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsGetApplicationVersionIntentInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsGetApplicationVersionIntentInfos(params, options)(fetch, basePath);
        },
        /** 
         * Gets information about the application version models.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param skip The number of entries to skip. Default value is 0.
         * @param take The number of entries to return. Maximum page size is 500. Default is 100.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsGetApplicationVersionModelInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsGetApplicationVersionModelInfos(params, options)(fetch, basePath);
        },
        /** 
         * Gets information about the prebuilt entity models.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param skip The number of entries to skip. Default value is 0.
         * @param take The number of entries to return. Maximum page size is 500. Default is 100.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsGetApplicationVersionPrebuiltInfos(params: {  "appId": string; "versionId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsGetApplicationVersionPrebuiltInfos(params, options)(fetch, basePath);
        },
        /** 
         * Gets all the available prebuilt entity extractors for the application.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsGetAvailablePrebuiltEntityExtractors(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsGetAvailablePrebuiltEntityExtractors(params, options)(fetch, basePath);
        },
        /** 
         * Gets information of a closed list model.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param clEntityId Format - guid. The closed list model ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsGetClosedListEntityInfo(params: {  "appId": string; "versionId": string; "clEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsGetClosedListEntityInfo(params, options)(fetch, basePath);
        },
        /** 
         * Gets information about the composite entity model.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param cEntityId Format - guid. The composite entity extractor ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsGetCompositeEntityInfo(params: {  "appId": string; "versionId": string; "cEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsGetCompositeEntityInfo(params, options)(fetch, basePath);
        },
        /** 
         * Gets information about the entity model.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param entityId Format - guid. The entity extractor ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsGetEntityInfo(params: {  "appId": string; "versionId": string; "entityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsGetEntityInfo(params, options)(fetch, basePath);
        },
        /** 
         * Gets information about the hierarchical entity model.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param hEntityId Format - guid. The hierarchical entity extractor ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsGetHierarchicalEntityInfo(params: {  "appId": string; "versionId": string; "hEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsGetHierarchicalEntityInfo(params, options)(fetch, basePath);
        },
        /** 
         * Gets information about the intent model.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param intentId Format - guid. The intent classifier ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsGetIntentInfo(params: {  "appId": string; "versionId": string; "intentId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsGetIntentInfo(params, options)(fetch, basePath);
        },
        /** 
         * Gets information about the prebuilt entity model.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param prebuiltId Format - guid. The prebuilt entity extractor ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsGetPrebuiltInfo(params: {  "appId": string; "versionId": string; "prebuiltId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsGetPrebuiltInfo(params, options)(fetch, basePath);
        },
        /** 
         * Adds a batch of sublists to an existing closedlist.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param clEntityId Format - guid. The closed list entity extractor ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param closedListModelPatchObject A json object containing words list batch.
         */
        modelsPatchClosedListEntityModel(params: {  "appId": string; "versionId": string; "clEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "closedListModelPatchObject"?: ClosedListModelPatchObject; }, options?: any) {
            return DefaultApiFp.modelsPatchClosedListEntityModel(params, options)(fetch, basePath);
        },
        /** 
         * Updates the name of an entity extractor.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param entityId Format - guid. The entity extractor ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param modelUpdateObject A model object containing the new entity extractor name.
         */
        modelsRenameEntityModel(params: {  "appId": string; "versionId": string; "entityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "modelUpdateObject"?: ModelUpdateObject; }, options?: any) {
            return DefaultApiFp.modelsRenameEntityModel(params, options)(fetch, basePath);
        },
        /** 
         * Updates the name of an intent classifier.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param intentId Format - guid. The intent classifier ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param modelUpdateObject A model object containing the new intent classifier name.
         */
        modelsRenameIntentModel(params: {  "appId": string; "versionId": string; "intentId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "modelUpdateObject"?: ModelUpdateObject; }, options?: any) {
            return DefaultApiFp.modelsRenameIntentModel(params, options)(fetch, basePath);
        },
        /** 
         * Suggests examples that would improve the accuracy of the entity model.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param entityId Format - guid. The target entity extractor model to enhance.
         * @param take Maximum number of queries to be returned. Default is set to 10. Maximum is 500.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsSuggestEndpointQueriesForEntities(params: {  "appId": string; "versionId": string; "entityId": string; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsSuggestEndpointQueriesForEntities(params, options)(fetch, basePath);
        },
        /** 
         * Suggests examples that would improve the accuracy of the intent model.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param intentId Format - guid. The target intent classifier model to enhance.
         * @param take Maximum number of queries to be returned. Default is set to 10. Maximum is 500.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        modelsSuggestEndpointQueriesForIntents(params: {  "appId": string; "versionId": string; "intentId": string; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.modelsSuggestEndpointQueriesForIntents(params, options)(fetch, basePath);
        },
        /** 
         * Updates the closed list model.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param clEntityId Format - guid. The closed list entity extractor ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param closedListModelUpdateObject A json object containing the new entity name and words list.
         */
        modelsUpdateClosedListEntityModel(params: {  "appId": string; "versionId": string; "clEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "closedListModelUpdateObject"?: ClosedListModelUpdateObject; }, options?: any) {
            return DefaultApiFp.modelsUpdateClosedListEntityModel(params, options)(fetch, basePath);
        },
        /** 
         * Updates the composite entity extractor.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param cEntityId Format - guid. The composite entity extractor ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param hierarchicalModelUpdateObject A model object containing the new entity extractor name and children.
         */
        modelsUpdateCompositeEntityModel(params: {  "appId": string; "versionId": string; "cEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "hierarchicalModelUpdateObject"?: HierarchicalModelUpdateObject; }, options?: any) {
            return DefaultApiFp.modelsUpdateCompositeEntityModel(params, options)(fetch, basePath);
        },
        /** 
         * Updates the name and children of a hierarchical entity model.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param hEntityId Format - guid. The hierarchical entity extractor ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param hierarchicalModelUpdateObject Model containing names of the children of the hierarchical entity.
         */
        modelsUpdateHierarchicalEntityModel(params: {  "appId": string; "versionId": string; "hEntityId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "hierarchicalModelUpdateObject"?: HierarchicalModelUpdateObject; }, options?: any) {
            return DefaultApiFp.modelsUpdateHierarchicalEntityModel(params, options)(fetch, basePath);
        },
        /** 
         * Gets the training status of all models for the specified application.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        trainGetApplicationVersionTrainingStatus(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.trainGetApplicationVersionTrainingStatus(params, options)(fetch, basePath);
        },
        /** 
         * Sends a training request for the models of the specified application version.&lt;/br&gt;The application version is not considered trained unless all the models either have been trained successfully or are up to date.&lt;/br&gt;&lt;b&gt;The user must get the training status at least once after training is completed.&lt;/b&gt;
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        trainTrainApplicationVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.trainTrainApplicationVersion(params, options)(fetch, basePath);
        },
        /** 
         * Adds an external API key to the user.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param externalKeyCreateObject External API key object.
         */
        userAddExternalApiKey(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "externalKeyCreateObject"?: ExternalKeyCreateObject; }, options?: any) {
            return DefaultApiFp.userAddExternalApiKey(params, options)(fetch, basePath);
        },
        /** 
         * Adds a subscription key to the user.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param userSubscriptionCreateObject Subscription key object.
         */
        userAddSubscriptionKey(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "userSubscriptionCreateObject"?: UserSubscriptionCreateObject; }, options?: any) {
            return DefaultApiFp.userAddSubscriptionKey(params, options)(fetch, basePath);
        },
        /** 
         * Deletes a user external API key.
         * @param externalKeyValue The external API key.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        userDeleteExternalApiKey(params: {  "externalKeyValue": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.userDeleteExternalApiKey(params, options)(fetch, basePath);
        },
        /** 
         * Deletes a user subscription key.
         * @param subscriptionKey The subscription key.
         * @param subscriptionKey2 subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        userDeleteSubscriptionKey(params: {  "subscriptionKey": string; "subscriptionKey2"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.userDeleteSubscriptionKey(params, options)(fetch, basePath);
        },
        /** 
         * Gets a list of the user&#39;s external api keys.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        userGetUserExternalApiKeys(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.userGetUserExternalApiKeys(params, options)(fetch, basePath);
        },
        /** 
         * Gets the user&#39;s endpoint subscription keys.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        userGetUserSubscriptionKeys(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.userGetUserSubscriptionKeys(params, options)(fetch, basePath);
        },
        /** 
         * Renames a subscription key owned by the user.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        userRenameSubscriptionKey(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.userRenameSubscriptionKey(params, options)(fetch, basePath);
        },
        /** 
         * Resets the user programmatic key.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        userResetProgrammaticKey(params: {  "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.userResetProgrammaticKey(params, options)(fetch, basePath);
        },
        /** 
         * Assigns a subscription key to the given application version.
         * @param appId Format - guid. The application version ID.
         * @param versionId The application ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param keyValue The value of the endpoint key to assign to the application.
         */
        versionsAssignSubscriptionKeyToVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "keyValue"?: KeyValue; }, options?: any) {
            return DefaultApiFp.versionsAssignSubscriptionKeyToVersion(params, options)(fetch, basePath);
        },
        /** 
         * Creates a new version equivalent to the current snapshot of the selected application version.
         * @param appId Format - guid. The application ID.
         * @param versionId The application version ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param taskUpdateObject An object containing the new version ID.
         */
        versionsCloneVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "taskUpdateObject"?: TaskUpdateObject; }, options?: any) {
            return DefaultApiFp.versionsCloneVersion(params, options)(fetch, basePath);
        },
        /** 
         * Deletes an application version.
         * @param appId Format - guid. The application version ID.
         * @param versionId The application ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        versionsDeleteApplicationVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.versionsDeleteApplicationVersion(params, options)(fetch, basePath);
        },
        /** 
         * Deletes an external API key currently associated to the given application according for the specified key type.
         * @param appId Format - guid. The application version ID.
         * @param versionId The application ID.
         * @param keyType The external key type.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        versionsDeleteApplicationVersionExternalKey(params: {  "appId": string; "versionId": string; "keyType": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.versionsDeleteApplicationVersionExternalKey(params, options)(fetch, basePath);
        },
        /** 
         * Deleted an unlabelled utterance.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        versionsDeleteUnlabelledUtterance(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.versionsDeleteUnlabelledUtterance(params, options)(fetch, basePath);
        },
        /** 
         * Exports a LUIS application to JSON format.
         * @param appId Format - guid. The application version ID.
         * @param versionId The application ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        versionsExportApplicationVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.versionsExportApplicationVersion(params, options)(fetch, basePath);
        },
        /** 
         * Gets the task info.
         * @param appId Format - guid. The application ID.
         * @param versionId The task version ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        versionsGetApplicationVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.versionsGetApplicationVersion(params, options)(fetch, basePath);
        },
        /** 
         * Gets the given application versions&#39;s external keys.
         * @param appId Format - guid. The application ID.
         * @param versionId The application version ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        versionsGetApplicationVersionExternalApiKeys(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.versionsGetApplicationVersionExternalApiKeys(params, options)(fetch, basePath);
        },
        /** 
         * Gets the given application version&#39;s subscription key.
         * @param appId Format - guid. The application version ID.
         * @param versionId The id of the app to get the key for.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        versionsGetApplicationVersionSubscriptionKey(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.versionsGetApplicationVersionSubscriptionKey(params, options)(fetch, basePath);
        },
        /** 
         * Gets the application versions info.
         * @param appId Format - guid. The application ID.
         * @param skip The number of entries to skip. Default value is 0.
         * @param take The number of entries to return. Maximum page size is 500. Default is 100.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        versionsGetApplicationVersions(params: {  "appId": string; "skip"?: number; "take"?: number; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; }, options?: any) {
            return DefaultApiFp.versionsGetApplicationVersions(params, options)(fetch, basePath);
        },
        /** 
         * Imports a new version into a LUIS application, the version&#39;s JSON should be included in in the request body.
         * @param appId Format - guid. The application ID.
         * @param versionId The imported versionId.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param jSONApp A JSON representing the LUIS application structure.
         */
        versionsImportVersionToApplication(params: {  "appId": string; "versionId"?: string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "jSONApp"?: JSONApp; }, options?: any) {
            return DefaultApiFp.versionsImportVersionToApplication(params, options)(fetch, basePath);
        },
        /** 
         * Updates the name or description of the application version.
         * @param appId Format - guid. The application version ID.
         * @param versionId The application ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param taskUpdateObject A JSON object containing Name and Description of the application.
         */
        versionsRenameApplicationVersion(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "taskUpdateObject"?: TaskUpdateObject; }, options?: any) {
            return DefaultApiFp.versionsRenameApplicationVersion(params, options)(fetch, basePath);
        },
        /** 
         * Assigns an external API key to the given application according to the specified key type.
         * @param appId Format - guid. The application version ID.
         * @param versionId The application ID.
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param externalKeyUpdateObject The external api key to be assigned.
         */
        versionsUpdateApplicationVersionExternalKey(params: {  "appId": string; "versionId": string; "subscriptionKey"?: string; "ocpApimSubscriptionKey"?: string; "externalKeyUpdateObject"?: ExternalKeyUpdateObject; }, options?: any) {
            return DefaultApiFp.versionsUpdateApplicationVersionExternalKey(params, options)(fetch, basePath);
        },
    };
};

